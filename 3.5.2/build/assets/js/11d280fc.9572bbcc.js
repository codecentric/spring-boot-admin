"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[918],{2521:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"server/notifications/notifications","title":"Add Notifications","description":"You can add your own Notifiers by adding Spring Beans which implement the Notifier interface, at best by extendingAbstractEventNotifier or AbstractStatusChangeNotifier.","source":"@site/docs/server/notifications/notifications.md","sourceDirName":"server/notifications","slug":"/server/notifications/","permalink":"/3.5.2/docs/server/notifications/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_custom_props":{"icon":"notifications"}},"sidebar":"tutorialSidebar","previous":{"title":"Set up the Server","permalink":"/3.5.2/docs/server/server"},"next":{"title":"Foster Security","permalink":"/3.5.2/docs/server/security"}}');var s=t(4848),r=t(8453);const o={sidebar_position:1,sidebar_custom_props:{icon:"notifications"}},d="Add Notifications",a={},c=[{value:"Notification",id:"notification",level:2},{value:"Mail Notifications",id:"mail-notifications",level:3},{value:"Hipchat Notifications",id:"hipchat-notifications",level:3},{value:"Slack Notifications",id:"slack-notifications",level:3},{value:"Let\u2019s Chat Notifications",id:"lets-chat-notifications",level:3},{value:"Microsoft Teams Notifications",id:"microsoft-teams-notifications",level:3},{value:"Telegram Notifications",id:"telegram-notifications",level:3},{value:"Webex Notifications",id:"webex-notifications",level:3},{value:"Discord Notifications",id:"discord-notifications",level:3},{value:"Notification Proxy Settings",id:"notification-proxy-settings",level:3},{value:"Notification Reminder",id:"notification-reminder",level:3},{value:"Filtering Notifications",id:"filtering-notifications",level:3},{value:"DingTalk Notifications",id:"dingtalk-notifications",level:3},{value:"RocketChat Notifications",id:"rocketchat-notifications",level:3}];function l(e){const i={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"add-notifications",children:"Add Notifications"})}),"\n",(0,s.jsxs)(i.p,{children:["You can add your own Notifiers by adding Spring Beans which implement the ",(0,s.jsx)(i.code,{children:"Notifier"})," interface, at best by extending",(0,s.jsx)(i.code,{children:"AbstractEventNotifier"})," or ",(0,s.jsx)(i.code,{children:"AbstractStatusChangeNotifier"}),"."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",metastring:'title="CustomNotifier.java"',children:'public class CustomNotifier extends AbstractEventNotifier {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(CustomNotifier.class);\n\n    public CustomNotifier(InstanceRepository repository) {\n        super(repository);\n    }\n\n    @Override\n    protected Mono<Void> doNotify(InstanceEvent event, Instance instance) {\n        return Mono.fromRunnable(() -> {\n            if (event instanceof InstanceStatusChangedEvent statusChangedEvent) {\n                LOGGER.info("Instance {} ({}) is {}", instance.getRegistration().getName(), event.getInstance(),\n                        statusChangedEvent.getStatusInfo().getStatus());\n            }\n            else {\n                LOGGER.info("Instance {} ({}) {}", instance.getRegistration().getName(), event.getInstance(),\n                        event.getType());\n            }\n        });\n    }\n}\n'})}),"\n",(0,s.jsx)(i.h2,{id:"notification",children:"Notification"}),"\n",(0,s.jsx)(i.h3,{id:"mail-notifications",children:"Mail Notifications"}),"\n",(0,s.jsxs)(i.p,{children:["Mail notifications will be delivered as HTML emails rendered using ",(0,s.jsx)(i.a,{href:"https://www.thymeleaf.org/%5BThymeleaf",children:"https://www.thymeleaf.org/[Thymeleaf"}),"] templates.\nTo enable Mail notifications, configure a ",(0,s.jsx)(i.code,{children:"JavaMailSender"})," using ",(0,s.jsx)(i.code,{children:"spring-boot-starter-mail"})," and set a recipient."]}),"\n",(0,s.jsx)("figure",{children:(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.img,{alt:"mail-notification.png",src:t(5798).A+"",width:"640",height:"439"}),"\n",(0,s.jsx)("figcaption",{children:"Sample Mail Notification with default template"})]})}),"\n",(0,s.jsx)(i.admonition,{type:"info",children:(0,s.jsx)(i.p,{children:"To prevent disclosure of sensitive information, the default mail template doesn\u2019t show any metadata of the instance. If\nyou want to you show some of the metadata you can use a custom template."})}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-xml",metastring:'title="Add spring-boot-starter-mail to your dependencies"',children:"\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-mail</artifactId>\n</dependency>\n"})}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-properties",metastring:'title="application.properties"',children:"spring.mail.host=smtp.example.com\nspring.boot.admin.notify.mail.to=admin@example.com\n"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Mail notifications configuration options"})}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Property name"}),(0,s.jsx)(i.th,{children:"Description"}),(0,s.jsx)(i.th,{children:"Default value"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.mail.enabled"}),(0,s.jsx)(i.td,{children:"Enable mail notifications"}),(0,s.jsx)(i.td,{children:"true"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.mail.ignore-changes"}),(0,s.jsx)(i.td,{children:'Comma-delimited list of status changes to be ignored. Format: "<from-status>:<to-status>". Wildcards allowed.'}),(0,s.jsxs)(i.td,{children:["UNKNOWN",":UP"]})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.mail.template"}),(0,s.jsx)(i.td,{children:"Resource path to the Thymeleaf template used for rendering."}),(0,s.jsx)(i.td,{children:"classpath:/META-INF/spring-boot-admin-server/mail/status-changed.html"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.mail.to"}),(0,s.jsx)(i.td,{children:"Comma-delimited list of mail recipients"}),(0,s.jsx)(i.td,{children:"root@localhost"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.mail.cc"}),(0,s.jsx)(i.td,{children:"Comma-delimited list of carbon-copy recipients"}),(0,s.jsx)(i.td,{})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.mail.from"}),(0,s.jsx)(i.td,{children:"Mail sender"}),(0,s.jsx)(i.td,{children:"Spring Boot Admin <noreply@localhost>"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.mail.additional-properties"}),(0,s.jsx)(i.td,{children:"Additional properties which can be accessed from the template"}),(0,s.jsx)(i.td,{})]})]})]}),"\n",(0,s.jsx)(i.h3,{id:"hipchat-notifications",children:"Hipchat Notifications"}),"\n",(0,s.jsxs)(i.p,{children:["To enable ",(0,s.jsx)(i.a,{href:"https://www.hipchat.com/",children:"Hipchat"})," notifications you need to create an API token on your Hipchat account and set the appropriate configuration properties."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Hipchat notifications configuration options"})}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Property name"}),(0,s.jsx)(i.th,{children:"Description"}),(0,s.jsx)(i.th,{children:"Default value"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.hipchat.enabled"}),(0,s.jsx)(i.td,{children:"Enable Hipchat notifications"}),(0,s.jsx)(i.td,{children:"true"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.hipchat.ignore-changes"}),(0,s.jsx)(i.td,{children:'Comma-delimited list of status changes to be ignored. Format: "<from-status>:<to-status>". Wildcards allowed.'}),(0,s.jsxs)(i.td,{children:['"UNKNOWN',":UP",'"']})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.hipchat.url"}),(0,s.jsx)(i.td,{children:"The HipChat REST API (V2) URL"}),(0,s.jsx)(i.td,{})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.hipchat.auth-token"}),(0,s.jsx)(i.td,{children:"The API token with access to the notification room"}),(0,s.jsx)(i.td,{})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.hipchat.room-id"}),(0,s.jsx)(i.td,{children:"The ID or url-encoded name of the room to send notifications to"}),(0,s.jsx)(i.td,{})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.hipchat.notify"}),(0,s.jsx)(i.td,{children:"Whether the message should trigger a user notification"}),(0,s.jsx)(i.td,{children:"false"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.hipchat.description"}),(0,s.jsx)(i.td,{children:"Description to use in the event. SpEL-expressions are supported"}),(0,s.jsx)(i.td,{children:'"<strong>#{instance.registration.name}</strong>/#{instance.id} is <strong>#{event.statusInfo.status}</strong>"'})]})]})]}),"\n",(0,s.jsx)(i.h3,{id:"slack-notifications",children:"Slack Notifications"}),"\n",(0,s.jsxs)(i.p,{children:["To enable ",(0,s.jsx)(i.a,{href:"https://slack.com/",children:"Slack"})," notifications you need to add an incoming Webhook under custom integrations on your Slack account and configure it appropriately."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Slack notifications configuration options"})}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Property name"}),(0,s.jsx)(i.th,{children:"Description"}),(0,s.jsx)(i.th,{children:"Default value"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.slack.enabled"}),(0,s.jsx)(i.td,{children:"Enable Slack notifications"}),(0,s.jsx)(i.td,{children:"true"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.slack.ignore-changes"}),(0,s.jsx)(i.td,{children:'Comma-delimited list of status changes to be ignored. Format: "<from-status>:<to-status>". Wildcards allowed.'}),(0,s.jsxs)(i.td,{children:['"UNKNOWN',":UP",'"']})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.slack.webhook-url"}),(0,s.jsx)(i.td,{children:"The Slack Webhook URL to send notifications to."}),(0,s.jsx)(i.td,{})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.slack.channel"}),(0,s.jsx)(i.td,{children:"Optional channel name (without # at the beginning). If different from channel in Slack Webhooks settings"}),(0,s.jsx)(i.td,{})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.slack.icon"}),(0,s.jsx)(i.td,{children:"Optional icon name (without surrounding colons). If different from icon in Slack Webhooks settings"}),(0,s.jsx)(i.td,{})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.slack.username"}),(0,s.jsx)(i.td,{children:"Optional username to send notification if different from in Slack Webhooks settings"}),(0,s.jsx)(i.td,{children:"Spring Boot Admin"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.slack.message"}),(0,s.jsx)(i.td,{children:"Message to use in the event. SpEL-expressions and Slack markups are supported"}),(0,s.jsxs)(i.td,{children:['"',(0,s.jsx)(i.em,{children:"#{instance.registration.name}"})," (#{instance.id}) is ",(0,s.jsx)(i.em,{children:"#{event.statusInfo.status}"}),'"']})]})]})]}),"\n",(0,s.jsx)(i.h3,{id:"lets-chat-notifications",children:"Let\u2019s Chat Notifications"}),"\n",(0,s.jsxs)(i.p,{children:["To enable ",(0,s.jsx)(i.a,{href:"https://sdelements.github.io/lets-chat/",children:"Let\u2019s Chat"})," notifications you need to add the host url and add the API token and username from Let\u2019s Chat"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Let\u2019s Chat notifications configuration options"})}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Property name"}),(0,s.jsx)(i.th,{children:"Description"}),(0,s.jsx)(i.th,{children:"Default value"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.letschat.enabled"}),(0,s.jsx)(i.td,{children:"Enable let\xb4s Chat notifications"}),(0,s.jsx)(i.td,{children:"true"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.letschat.ignore-changes"}),(0,s.jsx)(i.td,{children:'Comma-delimited list of status changes to be ignored. Format: "<from-status>:<to-status>". Wildcards allowed.'}),(0,s.jsxs)(i.td,{children:['"UNKNOWN',":UP",'"']})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.letschat.url"}),(0,s.jsx)(i.td,{children:"The let\xb4s Chat Host URL to send notifications"}),(0,s.jsx)(i.td,{})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.letschat.room"}),(0,s.jsx)(i.td,{children:"the room where to send the messages"}),(0,s.jsx)(i.td,{})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.letschat.token"}),(0,s.jsx)(i.td,{children:"the token to access the let\xb4s Chat API"}),(0,s.jsx)(i.td,{})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.letschat.username"}),(0,s.jsx)(i.td,{children:"The username for which the token was created"}),(0,s.jsx)(i.td,{children:"Spring Boot Admin"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.letschat.message"}),(0,s.jsx)(i.td,{children:"Message to use in the event. SpEL-expressions are supported"}),(0,s.jsxs)(i.td,{children:['"',(0,s.jsx)(i.em,{children:"#{instance.registration.name}"})," (#{instance.id}) is ",(0,s.jsx)(i.em,{children:"#{event.statusInfo.status}"}),'"']})]})]})]}),"\n",(0,s.jsx)(i.h3,{id:"microsoft-teams-notifications",children:"Microsoft Teams Notifications"}),"\n",(0,s.jsx)(i.p,{children:"To enable Microsoft Teams notifications you need to set up a connector webhook url and set the appropriate configuration property."}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Microsoft Teams notifications configuration options"})}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Property name"}),(0,s.jsx)(i.th,{children:"Description"}),(0,s.jsx)(i.th,{children:"Default value"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.ms-teams.enabled"}),(0,s.jsx)(i.td,{children:"Enable Microsoft Teams notifications"}),(0,s.jsx)(i.td,{children:"true"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.ms-teams.webhook-url"}),(0,s.jsx)(i.td,{children:"The Microsoft Teams webhook url to send the notifications to."}),(0,s.jsx)(i.td,{})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.ms-teams.deRegisteredTitle"}),(0,s.jsx)(i.td,{children:"Title of the Teams message when an app de-registers."}),(0,s.jsx)(i.td,{children:"De-Registered"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.ms-teams.registeredTitle"}),(0,s.jsx)(i.td,{children:"Title of the Teams message when an app dregisters."}),(0,s.jsx)(i.td,{children:"Registered"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.ms-teams.statusChangedTitle"}),(0,s.jsx)(i.td,{children:"Title of the Teams message when an app changes status."}),(0,s.jsx)(i.td,{children:"Status Changed"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.ms-teams.messageSummary"}),(0,s.jsx)(i.td,{children:"Summary section of every Teams message originating from Spring Boot Admin."}),(0,s.jsx)(i.td,{children:"Spring Boot Admin Notification"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.ms-teams.theme_color"}),(0,s.jsx)(i.td,{children:"Set the theme color. SpEL-expressions are supported."}),(0,s.jsx)(i.td,{children:"#{event.type == 'STATUS_CHANGED' ? (event.statusInfo.status=='UP' ? '6db33f' : 'b32d36') : '439fe0'}"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.ms-teams.deregister_activity_subtitle"}),(0,s.jsx)(i.td,{children:"Subtitle of the Activity section of the Teams message when an app de-registers. SpEL-expressions are supported."}),(0,s.jsx)(i.td,{children:"#{instance.registration.name} with id #{instance.id} has de-registered from Spring Boot Admin"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.ms-teams.register_activity_subtitle"}),(0,s.jsx)(i.td,{children:"Subtitle of the Activity section of the Teams message when an app registers. SpEL-expressions are supported."}),(0,s.jsx)(i.td,{children:"#{instance.registration.name} with id #{instance.id} has registered with Spring Boot Admin"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.ms-teams.status_activity_subtitle"}),(0,s.jsx)(i.td,{children:"Subtitle of the Activity section of the Teams message when an app changes status. SpEL-expressions are supported."}),(0,s.jsx)(i.td,{children:"#{instance.registration.name} with id #{instance.id} changed status from #{lastStatus} to #{event.statusInfo.status}"})]})]})]}),"\n",(0,s.jsx)(i.h3,{id:"telegram-notifications",children:"Telegram Notifications"}),"\n",(0,s.jsxs)(i.p,{children:["To enable ",(0,s.jsx)(i.a,{href:"https://telegram.org/",children:"Telegram"})," notifications you need to create and authorize a telegram bot and set the appropriate configuration properties for auth-token and chat-id."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Telegram notifications configuration options"})}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Property name"}),(0,s.jsx)(i.th,{children:"Description"}),(0,s.jsx)(i.th,{children:"Default value"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.telegram.enabled"}),(0,s.jsx)(i.td,{children:"Enable Telegram notifications"}),(0,s.jsx)(i.td,{children:"true"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.telegram.auth-token"}),(0,s.jsxs)(i.td,{children:["The token identifying und authorizing your Telegram bot (e.g. 123456",":ABC-DEF1234ghIkl-zyx57W2v1u123ew11",")."]}),(0,s.jsx)(i.td,{})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.telegram.chat-id"}),(0,s.jsx)(i.td,{children:"Unique identifier for the target chat or username of the target channel"}),(0,s.jsx)(i.td,{})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.telegram.disable-notify"}),(0,s.jsx)(i.td,{children:"If true users will receive a notification with no sound."}),(0,s.jsx)(i.td,{children:"false"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.telegram.parse_mode"}),(0,s.jsx)(i.td,{children:"The parsing mode for the sent message. Currently, `HTML' and 'Markdown' are supported."}),(0,s.jsx)(i.td,{children:"'HTML'"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.telegram.message"}),(0,s.jsx)(i.td,{children:"Text to send. SpEL-expressions are supported."}),(0,s.jsx)(i.td,{children:'"<strong>#{instance.registration.name}</strong>/#{instance.id} is <strong>#{event.statusInfo.status}</strong>"'})]})]})]}),"\n",(0,s.jsx)(i.h3,{id:"webex-notifications",children:"Webex Notifications"}),"\n",(0,s.jsxs)(i.p,{children:["To enable ",(0,s.jsx)(i.a,{href:"https://www.webex.com/",children:"Webex"})," notifications, you need to set the appropriate configuration properties for ",(0,s.jsx)(i.code,{children:"auth-token"})," and ",(0,s.jsx)(i.code,{children:"room-id"}),"."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Webex notifications configuration options"})}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Property name"}),(0,s.jsx)(i.th,{children:"Description"}),(0,s.jsx)(i.th,{children:"Default value"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.webex.enabled"}),(0,s.jsx)(i.td,{children:"Enable Webex notifications"}),(0,s.jsx)(i.td,{children:"true"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.webex.url"}),(0,s.jsx)(i.td,{children:"The Webex server url to send the notifications to."}),(0,s.jsxs)(i.td,{children:['"',(0,s.jsx)(i.a,{href:"https://webexapis.com/v1/messages",children:"https://webexapis.com/v1/messages"}),'"']})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.webex.auth-token"}),(0,s.jsx)(i.td,{children:"The authentication token for your Webex account (e.g. 123456-ascbhuwbtzzk-abtabhixta-788654)."}),(0,s.jsx)(i.td,{})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.webex.room-id"}),(0,s.jsx)(i.td,{children:"Unique identifier for the target room in Webex."}),(0,s.jsx)(i.td,{})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.webex.message"}),(0,s.jsx)(i.td,{children:"Text to send. SpEL-expressions are supported. By default, messages will be sent as Markdown, so you can include Markdown formatting."}),(0,s.jsxs)(i.td,{children:['"',(0,s.jsx)(i.em,{children:"#{instance.registration.name}"})," (#{instance.id}) is ",(0,s.jsx)(i.em,{children:"#{event.statusInfo.status}"}),'"']})]})]})]}),"\n",(0,s.jsx)(i.h3,{id:"discord-notifications",children:"Discord Notifications"}),"\n",(0,s.jsx)(i.p,{children:"To enable Discord notifications you need to create a webhook and set the appropriate configuration property."}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Discord notifications configuration options"})}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Property name"}),(0,s.jsx)(i.th,{children:"Description"}),(0,s.jsx)(i.th,{children:"Default value"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.discord.enabled"}),(0,s.jsx)(i.td,{children:"Enable Discord notifications"}),(0,s.jsx)(i.td,{children:"true"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.discord.webhook-url"}),(0,s.jsx)(i.td,{children:"The Discord webhook url to send the notifications to."}),(0,s.jsx)(i.td,{})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.discord.username"}),(0,s.jsx)(i.td,{children:"Optional username."}),(0,s.jsx)(i.td,{children:(0,s.jsx)(i.em,{children:"Default set in Discord"})})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.discord.avatar-url"}),(0,s.jsx)(i.td,{children:"Optional URL to avatar."}),(0,s.jsx)(i.td,{children:(0,s.jsx)(i.em,{children:"Default set in Discord"})})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.discord.tts"}),(0,s.jsx)(i.td,{children:"If the message is a text to speech message."}),(0,s.jsx)(i.td,{children:"false"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.discord.message"}),(0,s.jsx)(i.td,{children:"Text to send. SpEL-expressions are supported."}),(0,s.jsxs)(i.td,{children:['"',(0,s.jsx)(i.em,{children:"#{instance.registration.name}"})," (#{instance.id}) is ",(0,s.jsx)(i.em,{children:"#{event.statusInfo.status}"}),'"']})]})]})]}),"\n",(0,s.jsx)(i.h3,{id:"notification-proxy-settings",children:"Notification Proxy Settings"}),"\n",(0,s.jsxs)(i.p,{children:["All Notifiers which are using a ",(0,s.jsx)(i.code,{children:"RestTemplate"})," can be configured to use a proxy."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Notification Proxy configuration options"})}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Property name"}),(0,s.jsx)(i.th,{children:"Description"}),(0,s.jsx)(i.th,{children:"Default value"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.proxy.host"}),(0,s.jsx)(i.td,{children:"The proxy host"}),(0,s.jsx)(i.td,{})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.proxy.port"}),(0,s.jsx)(i.td,{children:"The proxy port"}),(0,s.jsx)(i.td,{})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.proxy.username"}),(0,s.jsx)(i.td,{children:"The proxy username (if proxy requires authentication)"}),(0,s.jsx)(i.td,{})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.proxy.password"}),(0,s.jsx)(i.td,{children:"The proxy password (if proxy requires authentication)"}),(0,s.jsx)(i.td,{})]})]})]}),"\n",(0,s.jsx)(i.h3,{id:"notification-reminder",children:"Notification Reminder"}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"RemindingNotifier"})," sends reminders for down/offline applications, it delegates the sending of notifications to another notifier."]}),"\n",(0,s.jsxs)(i.p,{children:["By default, a reminder is triggered when a registered application changes to ",(0,s.jsx)(i.code,{children:"DOWN"})," or ",(0,s.jsx)(i.code,{children:"OFFLINE"}),". You can alter this behaviour via ",(0,s.jsx)(i.code,{children:"setReminderStatuses()"}),". The reminder ends when either the status changes to a non-triggering status or the regarding application gets deregistered."]}),"\n",(0,s.jsxs)(i.p,{children:["By default, the reminders are sent every 10 minutes, to change this use ",(0,s.jsx)(i.code,{children:"setReminderPeriod()"}),". The ",(0,s.jsx)(i.code,{children:"RemindingNotifier"})," itself doesn\u2019t start the background thread to send the reminders, you need to take care of this as shown in the given example below;"]}),"\n",(0,s.jsx)(i.p,{children:"How to configure reminders"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",metastring:'title="NotifierConfiguration.java"',children:'@Configuration\npublic class NotifierConfiguration {\n    @Autowired\n    private Notifier notifier;\n\n    @Primary\n    @Bean(initMethod = "start", destroyMethod = "stop")\n    public RemindingNotifier remindingNotifier() {\n        RemindingNotifier notifier = new RemindingNotifier(notifier, repository);\n        notifier.setReminderPeriod(Duration.ofMinutes(10)); // (1)\n        notifier.setCheckReminderInverval(Duration.ofSeconds(10)); //(2)\n        return notifier;\n    }\n}\n'})}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsx)(i.li,{children:"The reminders will be sent every 10 minutes."}),"\n",(0,s.jsx)(i.li,{children:"Schedules sending of due reminders every 10 seconds."}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"filtering-notifications",children:"Filtering Notifications"}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"FilteringNotifier"})," allows you to filter certain notification based on rules you can add/remove at runtime. It delegates the sending of notifications to another notifier."]}),"\n",(0,s.jsxs)(i.p,{children:["If you add a ",(0,s.jsx)(i.code,{children:"FilteringNotifier"})," to your ",(0,s.jsx)(i.code,{children:"ApplicationContext"})," a RESTful interface on ",(0,s.jsx)(i.code,{children:"notifications/filter"})," gets available. The restful interface provides the following methods for getting, adding, and deleting notification filters:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"GET notifications/filter"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Returns a list of all registered notification filters. Each containing the attributes ",(0,s.jsx)(i.code,{children:"id"}),", ",(0,s.jsx)(i.code,{children:"applicationName"}),", ",(0,s.jsx)(i.code,{children:"expiry"}),", and ",(0,s.jsx)(i.code,{children:"expired"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"POST notifications/filters?instanceId=<yourInstanceId>&applicationName=<yourApplicationName>&ttl=<yourInstant>"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Posts a new notification filter for the application/instance of the given ",(0,s.jsx)(i.code,{children:"instanceId"})," or ",(0,s.jsx)(i.code,{children:"applicationName"}),". Either ",(0,s.jsx)(i.code,{children:"instanceId"})," or ",(0,s.jsx)(i.code,{children:"applicationName"})," must be set. The parameter ",(0,s.jsx)(i.code,{children:"ttl"})," is optional and represents the expiration of the filter as an instant (the number of seconds from the epoch of ",(0,s.jsx)(i.code,{children:"1970-01-01T00:00:00Z"}),")."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"DELETE notifications/filters/{id}"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Deletes the notification filter with the requested id from the filters."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"You may as well access all notification filter configurations via the main applications view inside SBA client, as seen in the screenshot below."}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{alt:"Sample notification filters",src:t(4533).A+"",width:"3126",height:"802"})}),"\n",(0,s.jsxs)(i.p,{children:["A ",(0,s.jsx)(i.code,{children:"FilteringNotifier"})," might be useful, for instance, if you don\u2019t want to receive notifications when deploying your applications. Before stopping the application, you can add an (expiring) filter via a ",(0,s.jsx)(i.code,{children:"POST"})," request."]}),"\n",(0,s.jsx)(i.p,{children:"How to configure filtering"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",metastring:'title="NotifierConfig.java"',children:'@Configuration(proxyBeanMethods = false)\npublic class NotifierConfig {\n\n    private final InstanceRepository repository;\n\n    private final ObjectProvider<List<Notifier>> otherNotifiers;\n\n    public NotifierConfig(InstanceRepository repository, ObjectProvider<List<Notifier>> otherNotifiers) {\n        this.repository = repository;\n        this.otherNotifiers = otherNotifiers;\n    }\n\n    @Bean\n    public FilteringNotifier filteringNotifier() { // (1)\n        CompositeNotifier delegate = new CompositeNotifier(this.otherNotifiers.getIfAvailable(Collections::emptyList));\n        return new FilteringNotifier(delegate, this.repository);\n    }\n\n    @Primary\n    @Bean(initMethod = "start", destroyMethod = "stop")\n    public RemindingNotifier remindingNotifier() { // (2)\n        RemindingNotifier notifier = new RemindingNotifier(filteringNotifier(), this.repository);\n        notifier.setReminderPeriod(Duration.ofMinutes(10));\n        notifier.setCheckReminderInverval(Duration.ofSeconds(10));\n        return notifier;\n    }\n\n}\n'})}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:["Add the ",(0,s.jsx)(i.code,{children:"FilteringNotifier"})," bean using a delegate (e.g. ",(0,s.jsx)(i.code,{children:"MailNotifier"})," when configured)"]}),"\n",(0,s.jsxs)(i.li,{children:["Add the ",(0,s.jsx)(i.code,{children:"RemindingNotifier"})," as primary bean using the ",(0,s.jsx)(i.code,{children:"FilteringNotifier"})," as delegate."]}),"\n"]}),"\n",(0,s.jsx)(i.admonition,{type:"tip",children:(0,s.jsx)(i.p,{children:"This example combines the reminding and filtering notifiers. This allows you to get notifications after the deployed application hasn\u2019t restarted in a certain amount of time (until the filter expires)."})}),"\n",(0,s.jsx)(i.h3,{id:"dingtalk-notifications",children:"DingTalk Notifications"}),"\n",(0,s.jsxs)(i.p,{children:["To enable ",(0,s.jsx)(i.a,{href:"https://www.dingtalk.com/",children:"DingTalk"})," notifications you need to create and authorize a dingtalk bot and set the appropriate configuration properties for webhookUrl and secret."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"DingTalk notifications configuration options"})}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Property name"}),(0,s.jsx)(i.th,{children:"Description"}),(0,s.jsx)(i.th,{children:"Default value"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.dingtalk.enabled"}),(0,s.jsx)(i.td,{children:"Enable DingTalk notifications."}),(0,s.jsx)(i.td,{children:"true"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.dingtalk.webhook-url"}),(0,s.jsx)(i.td,{children:"The DingTalk webhook url to send the notifications to."}),(0,s.jsx)(i.td,{})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.dingtalk.secret"}),(0,s.jsx)(i.td,{children:"The secret to get message sign."}),(0,s.jsx)(i.td,{})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.dingtalk.message"}),(0,s.jsx)(i.td,{children:"Text to send. SpEL-expressions are supported."}),(0,s.jsx)(i.td,{children:'"#{instance.registration.name} #{instance.id} is #{event.statusInfo.status} "'})]})]})]}),"\n",(0,s.jsx)(i.h3,{id:"rocketchat-notifications",children:"RocketChat Notifications"}),"\n",(0,s.jsxs)(i.p,{children:["To enable ",(0,s.jsx)(i.a,{href:"https://www.rocket.chat/",children:"Rocket.Chat"})," notifications you need a personal token access and create a room to send message with this token"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Table 10. RocketChat notifications configuration options"})}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Property name"}),(0,s.jsx)(i.th,{children:"Description"}),(0,s.jsx)(i.th,{children:"Default value"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.rocketchat.enabled"}),(0,s.jsx)(i.td,{children:"Enable RocketChat notifications."}),(0,s.jsx)(i.td,{children:"true"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.rocketchat.url"}),(0,s.jsx)(i.td,{children:"The RocketChat server url to send the notifications to."}),(0,s.jsx)(i.td,{})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.rocketchat.userId"}),(0,s.jsx)(i.td,{children:"User id user"}),(0,s.jsx)(i.td,{})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.rocketchat.token"}),(0,s.jsx)(i.td,{children:"Generated token user"}),(0,s.jsx)(i.td,{})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.rocketchat.roomId"}),(0,s.jsx)(i.td,{children:"The room id to send the message"}),(0,s.jsx)(i.td,{})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"spring.boot.admin.notify.rocketchat.message"}),(0,s.jsx)(i.td,{children:"Text to send. SpEL-expressions are supported."}),(0,s.jsxs)(i.td,{children:['"',(0,s.jsx)(i.em,{children:"#{instance.registration.name}"})," (#{instance.id}) is ",(0,s.jsx)(i.em,{children:"#{event.statusInfo.status}"}),'"']})]})]})]})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},5798:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/mail-notification-a2acdea4c13fd4e1f2b2e336c827f6a8.png"},4533:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/notification-filter-afa48c90c2d49abec2c974d5d4387a9c.png"},8453:(e,i,t)=>{t.d(i,{R:()=>o,x:()=>d});var n=t(6540);const s={},r=n.createContext(s);function o(e){const i=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(r.Provider,{value:i},e.children)}}}]);