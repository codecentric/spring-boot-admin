"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[3721],{3101:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"server/security","title":"Foster Security","description":"Securing Spring Boot Admin Server","source":"@site/docs/server/02-security.md","sourceDirName":"server","slug":"/server/security","permalink":"/3.5.3/docs/server/security","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Webex Notifications","permalink":"/3.5.3/docs/server/notifications/notifier-webex"},"next":{"title":"Properties","permalink":"/3.5.3/docs/server/server-properties"}}');var s=t(4848),i=t(8453);const a={},o="Foster Security",c={},l=[{value:"Securing Spring Boot Admin Server",id:"securing-spring-boot-admin-server",level:2},{value:"Securing Client Actuator Endpoints",id:"securing-client-actuator-endpoints",level:2},{value:"SBA Client",id:"sba-client",level:3},{value:"SBA Server",id:"sba-server",level:3},{value:"Eureka",id:"eureka",level:3},{value:"Consul",id:"consul",level:3},{value:"CSRF on Actuator Endpoints",id:"csrf-on-actuator-endpoints",level:2},{value:"Using Mutual TLS",id:"using-mutual-tls",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"foster-security",children:"Foster Security"})}),"\n",(0,s.jsx)(n.h2,{id:"securing-spring-boot-admin-server",children:"Securing Spring Boot Admin Server"}),"\n",(0,s.jsxs)(n.p,{children:["Since there are several approaches on solving authentication and authorization in distributed web applications Spring Boot Admin doesn\u2019t ship a default one. By default ",(0,s.jsx)(n.code,{children:"spring-boot-admin-server-ui"})," provides a login page and a logout button."]}),"\n",(0,s.jsx)(n.p,{children:"A Spring Security configuration for your server could look like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="SecuritySecureConfig.java"',children:'@Configuration(proxyBeanMethods = false)\npublic class SecuritySecureConfig {\n\n    private final AdminServerProperties adminServer;\n\n    private final SecurityProperties security;\n\n    public SecuritySecureConfig(AdminServerProperties adminServer, SecurityProperties security) {\n        this.adminServer = adminServer;\n        this.security = security;\n    }\n\n    @Bean\n    protected SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        SavedRequestAwareAuthenticationSuccessHandler successHandler = new SavedRequestAwareAuthenticationSuccessHandler();\n        successHandler.setTargetUrlParameter("redirectTo");\n        successHandler.setDefaultTargetUrl(this.adminServer.path("/"));\n\n        http.authorizeHttpRequests((authorizeRequests) -> authorizeRequests //\n            .requestMatchers(new AntPathRequestMatcher(this.adminServer.path("/assets/**")))\n            .permitAll() // (1)\n            .requestMatchers(new AntPathRequestMatcher(this.adminServer.path("/actuator/info")))\n            .permitAll()\n            .requestMatchers(new AntPathRequestMatcher(adminServer.path("/actuator/health")))\n            .permitAll()\n            .requestMatchers(new AntPathRequestMatcher(this.adminServer.path("/login")))\n            .permitAll()\n            .dispatcherTypeMatchers(DispatcherType.ASYNC)\n            .permitAll() // https://github.com/spring-projects/spring-security/issues/11027\n            .anyRequest()\n            .authenticated()) // (2)\n            .formLogin(\n                    (formLogin) -> formLogin.loginPage(this.adminServer.path("/login")).successHandler(successHandler)) // (3)\n            .logout((logout) -> logout.logoutUrl(this.adminServer.path("/logout")))\n            .httpBasic(Customizer.withDefaults()); // (4)\n\n        http.addFilterAfter(new CustomCsrfFilter(), BasicAuthenticationFilter.class) // (5)\n            .csrf((csrf) -> csrf.csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())\n                .csrfTokenRequestHandler(new CsrfTokenRequestAttributeHandler())\n                .ignoringRequestMatchers(\n                        new AntPathRequestMatcher(this.adminServer.path("/instances"), POST.toString()), // (6)\n                        new AntPathRequestMatcher(this.adminServer.path("/instances/*"), DELETE.toString()), // (6)\n                        new AntPathRequestMatcher(this.adminServer.path("/actuator/**")) // (7)\n                ));\n\n        http.rememberMe((rememberMe) -> rememberMe.key(UUID.randomUUID().toString()).tokenValiditySeconds(1209600));\n\n        return http.build();\n\n    }\n\n    // Required to provide UserDetailsService for "remember functionality"\n    @Bean\n    public InMemoryUserDetailsManager userDetailsService(PasswordEncoder passwordEncoder) {\n        UserDetails user = User.withUsername("user").password(passwordEncoder.encode("password")).roles("USER").build();\n        return new InMemoryUserDetailsManager(user);\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n}\n'})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Grants public access to all static assets and the login page."}),"\n",(0,s.jsx)(n.li,{children:"Every other request must be authenticated."}),"\n",(0,s.jsx)(n.li,{children:"Configures login and logout."}),"\n",(0,s.jsx)(n.li,{children:"Enables HTTP-Basic support. This is needed for the Spring Boot Admin Client to register."}),"\n",(0,s.jsx)(n.li,{children:"Enables CSRF-Protection using Cookies"}),"\n",(0,s.jsx)(n.li,{children:"Disables CSRF-Protection for the endpoint the Spring Boot Admin Client uses to (de-)register."}),"\n",(0,s.jsx)(n.li,{children:"Disables CSRF-Protection for the actuator endpoints."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"In case you use the Spring Boot Admin Client, it needs the credentials for accessing the server:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="application.yml"',children:"spring.boot.admin.client:\n   username: sba-client\n   password: s3cret\n"})}),"\n",(0,s.jsxs)(n.p,{children:["For a complete sample look at ",(0,s.jsx)(n.a,{href:"https://github.com/codecentric/spring-boot-admin/tree/master/spring-boot-admin-samples/spring-boot-admin-sample-servlet/",children:"spring-boot-admin-sample-servlet"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"If you protect the /instances endpoint don\u2019t forget to configure the username and password on your SBA-Client using spring.boot.admin.client.username and spring.boot.admin.client.password."})}),"\n",(0,s.jsx)(n.h2,{id:"securing-client-actuator-endpoints",children:"Securing Client Actuator Endpoints"}),"\n",(0,s.jsxs)(n.p,{children:["When the actuator endpoints are secured using HTTP Basic authentication the SBA Server needs credentials to access them. You can submit the credentials in the metadata when registering the application. The ",(0,s.jsx)(n.code,{children:"BasicAuthHttpHeaderProvider"})," then uses this metadata to add the ",(0,s.jsx)(n.code,{children:"Authorization"})," header to access your application\u2019s actuator endpoints. You can provide your own ",(0,s.jsx)(n.code,{children:"HttpHeadersProvider"})," to alter the behaviour (e.g. add some decryption) or add extra headers."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"The SBA Server masks certain metadata in the HTTP interface to prevent leaking of sensitive information."})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"You should configure HTTPS for your SBA Server or (service registry) when transferring credentials via the metadata."})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"When using Spring Cloud Discovery, you must be aware that anybody who can query your service registry can obtain the credentials."})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["When using this approach the SBA Server decides whether the user can access the registered applications. There are more complex solutions possible (using OAuth2) to let the clients decide if the user can access the endpoints. For that please have a look at the samples in ",(0,s.jsx)(n.a,{href:"https://github.com/joshiste/spring-boot-admin-samples",children:"joshiste/spring-boot-admin-samples"}),"."]})}),"\n",(0,s.jsx)(n.h3,{id:"sba-client",children:"SBA Client"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="application.yml"',children:"spring.boot.admin.client:\n    url: http://localhost:8080\n    instance:\n      metadata:\n        user.name: ${spring.security.user.name}\n        user.password: ${spring.security.user.password}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"sba-server",children:"SBA Server"}),"\n",(0,s.jsx)(n.p,{children:"You can specify credentials via configuration properties in your admin server."}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["You can use this in conjunction with ",(0,s.jsx)(n.a,{href:"https://cloud.spring.io/spring-cloud-kubernetes/1.1.x/reference/html/#secrets-propertysource",children:"spring-cloud-kubernetes"})," to pull credentials from ",(0,s.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/configuration/secret/",children:"secrets"}),"."]})}),"\n",(0,s.jsxs)(n.p,{children:["To enable pulling credentials from properties the ",(0,s.jsx)(n.code,{children:"spring.boot.admin.instance-auth.enabled"})," property must be ",(0,s.jsx)(n.code,{children:"true"})," (default)."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"If your clients provide credentials via metadata (i.e., via service annotations), that metadata will be used instead of the properties."})}),"\n",(0,s.jsxs)(n.p,{children:["You can provide a default username and password by setting ",(0,s.jsx)(n.code,{children:"spring.boot.admin.instance-auth.default-user-name"})," and ",(0,s.jsx)(n.code,{children:"spring.boot.admin.instance-auth.default-user-password"}),". Optionally you can provide credentials for specific services (by name) using the ",(0,s.jsx)(n.code,{children:"spring.boot.admin.instance-auth.service-map.*.user-name"})," pattern, replacing ",(0,s.jsx)(n.code,{children:"*"})," with the service name."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="application.yml"',children:'spring.boot.admin:\n  instance-auth:\n    enabled: true\n    default-user-name: "${some.user.name.from.secret}"\n    default-password: "${some.user.password.from.secret}"\n    service-map:\n      my-first-service-to-monitor:\n        user-name: "${some.user.name.from.secret}"\n        user-password: "${some.user.password.from.secret}"\n      my-second-service-to-monitor:\n        user-name: "${some.user.name.from.secret}"\n        user-password: "${some.user.password.from.secret}"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"eureka",children:"Eureka"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="application.yml"',children:"eureka:\n  instance:\n    metadata-map:\n      user.name: ${spring.security.user.name}\n      user.password: ${spring.security.user.password}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"consul",children:"Consul"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="application.yml"',children:"spring.cloud.consul:\n  discovery:\n    metadata:\n        user-name: ${spring.security.user.name}\n        user-password: ${spring.security.user.password}\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:'Consul does not allow dots (".") in metadata keys, use dashes instead.'})}),"\n",(0,s.jsx)(n.h2,{id:"csrf-on-actuator-endpoints",children:"CSRF on Actuator Endpoints"}),"\n",(0,s.jsxs)(n.p,{children:["Some of the actuator endpoints (e.g. ",(0,s.jsx)(n.code,{children:"/loggers"}),") support POST requests. When using Spring Security you need to ignore the actuator endpoints for CSRF-Protection as the Spring Boot Admin Server currently lacks support."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="SecuritySecureConfig.java"',children:'@Bean\nprotected SecurityFilterChain filterChain(HttpSecurity http) {\n    return http.csrf(c -> c.ignoringRequestMatchers("/actuator/**")).build();\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"using-mutual-tls",children:"Using Mutual TLS"}),"\n",(0,s.jsxs)(n.p,{children:["SBA Server can also use client certificates to authenticate when accessing the actuator endpoints. If a custom configured ",(0,s.jsx)(n.code,{children:"ClientHttpConnector"})," bean is present, Spring Boot will automatically configure a ",(0,s.jsx)(n.code,{children:"WebClient.Builder"})," using it, which will be used by Spring Boot Admin."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="CustomHttpClientConfig.java"',children:"@Bean\npublic ClientHttpConnector customHttpClient() {\n    SslContextBuilder sslContext = SslContextBuilder.forClient();\n    //Your sslContext customizations go here\n    HttpClient httpClient = HttpClient.create().secure(\n        ssl -> ssl.sslContext(sslContext)\n    );\n    return new ReactorClientHttpConnector(httpClient);\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(6540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);