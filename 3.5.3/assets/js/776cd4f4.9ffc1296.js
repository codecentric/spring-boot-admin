"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[1706],{8315:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>g,frontMatter:()=>d,metadata:()=>o,toc:()=>m});const o=JSON.parse('{"id":"server/server","title":"Set up the Server","description":"Running Behind a Front-end Proxy Server","source":"@site/docs/server/01-server.mdx","sourceDirName":"server","slug":"/server/server","permalink":"/3.5.3/docs/server/server","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_custom_props":{"icon":"server"}},"sidebar":"tutorialSidebar","previous":{"title":"Spring Boot Admin Server","permalink":"/3.5.3/docs/server/"},"next":{"title":"Notifications","permalink":"/3.5.3/docs/server/notifications/"}}');var n=i(4848),r=i(8453),a=i(9874);const s=JSON.parse('{"qo":[{"name":"spring.boot.admin.discovery.converter.health-endpoint-path","type":"java.lang.String","description":"Default path of the health-endpoint to be used for the health-url of the discovered service.","sourceType":"de.codecentric.boot.admin.server.cloud.discovery.DefaultServiceInstanceConverter","defaultValue":"health"},{"name":"spring.boot.admin.discovery.converter.health-endpoint-path","type":"java.lang.String","description":"Default path of the health-endpoint to be used for the health-url of the discovered service.","sourceType":"de.codecentric.boot.admin.server.cloud.discovery.EurekaServiceInstanceConverter","defaultValue":"health"},{"name":"spring.boot.admin.discovery.converter.health-endpoint-path","type":"java.lang.String","description":"Default path of the health-endpoint to be used for the health-url of the discovered service.","sourceType":"de.codecentric.boot.admin.server.cloud.discovery.KubernetesServiceInstanceConverter","defaultValue":"health"},{"name":"spring.boot.admin.discovery.converter.management-context-path","type":"java.lang.String","description":"Default context-path to be appended to the url of the discovered service for the management-url.","sourceType":"de.codecentric.boot.admin.server.cloud.discovery.DefaultServiceInstanceConverter","defaultValue":"/actuator"},{"name":"spring.boot.admin.discovery.converter.management-context-path","type":"java.lang.String","description":"Default context-path to be appended to the url of the discovered service for the management-url.","sourceType":"de.codecentric.boot.admin.server.cloud.discovery.EurekaServiceInstanceConverter","defaultValue":"/actuator"},{"name":"spring.boot.admin.discovery.converter.management-context-path","type":"java.lang.String","description":"Default context-path to be appended to the url of the discovered service for the management-url.","sourceType":"de.codecentric.boot.admin.server.cloud.discovery.KubernetesServiceInstanceConverter","defaultValue":"/actuator"},{"name":"spring.boot.admin.discovery.enabled","type":"java.lang.Boolean","description":"Enable Spring Cloud Discovery support.","defaultValue":"true"},{"name":"spring.boot.admin.discovery.ignored-instances-metadata","type":"java.util.Map<java.lang.String,java.lang.String>","description":"Map of metadata that has to be matched by service instance that is to be ignored. (e.g. \\"discoverable=false\\")","sourceType":"de.codecentric.boot.admin.server.cloud.discovery.InstanceDiscoveryListener"},{"name":"spring.boot.admin.discovery.ignored-services","type":"java.util.Set<java.lang.String>","description":"Set of serviceIds to be ignored and not to be registered as application. Supports simple patterns (e.g. \\"foo*\\", \\"*foo\\", \\"foo*bar\\").","sourceType":"de.codecentric.boot.admin.server.cloud.discovery.InstanceDiscoveryListener"},{"name":"spring.boot.admin.discovery.instances-metadata","type":"java.util.Map<java.lang.String,java.lang.String>","description":"Map of metadata that has to be matched by service instance that is to be registered. (e.g. \\"discoverable=true\\")","sourceType":"de.codecentric.boot.admin.server.cloud.discovery.InstanceDiscoveryListener"},{"name":"spring.boot.admin.discovery.services","type":"java.util.Set<java.lang.String>","description":"Set of serviceIds that has to match to be registered as application. Supports simple patterns (e.g. \\"foo*\\", \\"*foo\\", \\"foo*bar\\"). Default value is everything","sourceType":"de.codecentric.boot.admin.server.cloud.discovery.InstanceDiscoveryListener"}]}');var c=i(617);const d={sidebar_custom_props:{icon:"server"}},p="Set up the Server",l={},m=[{value:"Running Behind a Front-end Proxy Server",id:"running-behind-a-front-end-proxy-server",level:2},{value:"Spring Cloud Discovery",id:"spring-cloud-discovery",level:2},{value:"Static Configuration using SimpleDiscoveryClient",id:"static-configuration-using-simplediscoveryclient",level:3},{value:"Other DiscoveryClients",id:"other-discoveryclients",level:3},{value:"Converting ServiceInstances",id:"converting-serviceinstances",level:3},{value:"CloudFoundry",id:"cloudfoundry",level:3},{value:"Clustering",id:"clustering",level:2}];function u(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"set-up-the-server",children:"Set up the Server"})}),"\n",(0,n.jsx)(t.h2,{id:"running-behind-a-front-end-proxy-server",children:"Running Behind a Front-end Proxy Server"}),"\n",(0,n.jsxs)(t.p,{children:["In case the Spring Boot Admin server is running behind a reverse proxy, it may be requried to configure the public url where the server is reachable via (",(0,n.jsx)(t.code,{children:"spring.boot.admin.ui.public-url"}),"). In addition, when the reverse proxy terminates the https connection, it may be necessary to configure ",(0,n.jsx)(t.code,{children:"server.forward-headers-strategy=native"})," (also see ",(0,n.jsx)(t.a,{href:"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-use-tomcat-behind-a-proxy-server",children:"Spring Boot Reference Guide"}),")."]}),"\n",(0,n.jsx)(t.h2,{id:"spring-cloud-discovery",children:"Spring Cloud Discovery"}),"\n",(0,n.jsxs)(t.p,{children:["The Spring Boot Admin Server can use Spring Clouds ",(0,n.jsx)(t.code,{children:"DiscoveryClient"})," to discover applications. The advantage is that the clients don\u2019t have to include the ",(0,n.jsx)(t.code,{children:"spring-boot-admin-starter-client"}),". You just have to add a ",(0,n.jsx)(t.code,{children:"DiscoveryClient"})," implementation to your admin server - everything else is done by AutoConfiguration."]}),"\n",(0,n.jsx)(t.h3,{id:"static-configuration-using-simplediscoveryclient",children:"Static Configuration using SimpleDiscoveryClient"}),"\n",(0,n.jsxs)(t.p,{children:["Spring Cloud provides a ",(0,n.jsx)(t.code,{children:"SimpleDiscoveryClient"}),". It allows you to specify client applications via static configuration:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",metastring:'title="pom.xml"',children:"<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter</artifactId>\n</dependency>\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",metastring:'title="application.yml"',children:"spring:\n  cloud:\n    discovery:\n      client:\n        simple:\n          instances:\n            test:\n              - uri: http://instance1.intern:8080\n                metadata:\n                  management.context-path: /actuator\n              - uri: http://instance2.intern:8080\n                metadata:\n                  management.context-path: /actuator\n"})}),"\n",(0,n.jsx)(t.h3,{id:"other-discoveryclients",children:"Other DiscoveryClients"}),"\n",(0,n.jsxs)(t.p,{children:["Spring Boot Admin supports all other implementations of Spring Cloud\u2019s ",(0,n.jsx)(t.code,{children:"DiscoveryClient"})," (",(0,n.jsx)(t.a,{href:"https://docs.spring.io/spring-cloud-netflix/docs/current/reference/html/#service-discovery-eureka-clients/",children:"Eureka"}),", ",(0,n.jsx)(t.a,{href:"https://docs.spring.io/spring-cloud-zookeeper/docs/current/reference/html/#spring-cloud-zookeeper-discovery",children:"Zookeeper"}),", ",(0,n.jsx)(t.a,{href:"https://docs.spring.io/spring-cloud-consul/docs/current/reference/html/#spring-cloud-consul-discovery",children:"Consul"}),", ",(0,n.jsx)(t.a,{href:"https://docs.spring.io/spring-cloud-kubernetes/docs/current/reference/html/#discoveryclient-for-kubernetes",children:"Kubernetes"}),", \u2026\u200b). You need to add it to the Spring Boot Admin Server and configure it properly. An ",(0,n.jsx)(t.a,{href:"/3.5.3/docs/installation-and-setup/#using-spring-cloud-discovery",children:"example setup using Eureka"})," is shown above."]}),"\n",(0,n.jsx)(t.h3,{id:"converting-serviceinstances",children:"Converting ServiceInstances"}),"\n",(0,n.jsxs)(t.p,{children:["The information from the service registry are converted by the ",(0,n.jsx)(t.code,{children:"ServiceInstanceConverter"}),". Spring Boot Admin ships with a default and Eureka converter implementation. The correct one is selected by AutoConfiguration."]}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsx)(t.p,{children:"You can modify how the information from the registry is used to register the application by using SBA Server configuration options and instance metadata. The values from the metadata takes precedence over the server config. If the plenty of options don\u2019t fit your needs you can provide your own ServiceInstanceConverter."})}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsx)(t.p,{children:"When using Eureka, the healthCheckUrl known to Eureka is used for health-checking, which can be set on your client using eureka.instance.healthCheckUrl."})}),"\n",(0,n.jsx)(c.G,{title:"Discovery configuration options",properties:s.qo}),"\n",(0,n.jsx)(t.h3,{id:"cloudfoundry",children:"CloudFoundry"}),"\n",(0,n.jsxs)(t.p,{children:["If you are deploying your applications to CloudFoundry then ",(0,n.jsx)(t.code,{children:"vcap.application.application_id"})," and ",(0,n.jsx)(t.code,{children:"vcap.application.instance_index"})," ",(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.em,{children:"must"})})," be added to the metadata for proper registration of applications with Spring Boot Admin Server. Here is a sample configuration for Eureka:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yml",metastring:'title="application.yml"',children:"eureka:\n  instance:\n    hostname: ${vcap.application.uris[0]}\n    nonSecurePort: 80\n    metadata-map:\n      applicationId: ${vcap.application.application_id}\n      instanceId: ${vcap.application.instance_index}\n"})}),"\n",(0,n.jsx)(t.h2,{id:"clustering",children:"Clustering"}),"\n",(0,n.jsxs)(t.p,{children:["Spring Boot Admin Server supports cluster replication via Hazelcast. It is automatically enabled when a ",(0,n.jsx)(t.code,{children:"HazelcastConfig"}),"- or ",(0,n.jsx)(t.code,{children:"HazelcastInstance"}),"-Bean is present. You can also configure the Hazelcast instance to be persistent, to keep the status over restarts. Also have a look at the ",(0,n.jsx)(t.a,{href:"http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-hazelcast/",children:"Spring Boot support for Hazelcast"}),"."]}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"Add Hazelcast to your dependencies:"}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",metastring:'title="pom.xml"',children:"<dependency>\n    <groupId>com.hazelcast</groupId>\n    <artifactId>hazelcast</artifactId>\n</dependency>\n"})}),"\n",(0,n.jsxs)(t.ol,{start:"2",children:["\n",(0,n.jsx)(t.li,{children:"Instantiate a HazelcastConfig:"}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",metastring:'title="HazelcastConfig.java"',children:'@Bean\npublic Config hazelcastConfig() {\n    // This map is used to store the events.\n    // It should be configured to reliably hold all the data,\n    // Spring Boot Admin will compact the events, if there are too many\n    MapConfig eventStoreMap = new MapConfig(DEFAULT_NAME_EVENT_STORE_MAP).setInMemoryFormat(InMemoryFormat.OBJECT)\n        .setBackupCount(1)\n        .setMergePolicyConfig(new MergePolicyConfig(PutIfAbsentMergePolicy.class.getName(), 100));\n    // This map is used to deduplicate the notifications.\n    // If data in this map gets lost it should not be a big issue as it will atmost\n    // lead to\n    // the same notification to be sent by multiple instances\n    MapConfig sentNotificationsMap = new MapConfig(DEFAULT_NAME_SENT_NOTIFICATIONS_MAP)\n        .setInMemoryFormat(InMemoryFormat.OBJECT)\n        .setBackupCount(1)\n        .setEvictionConfig(\n                new EvictionConfig().setEvictionPolicy(EvictionPolicy.LRU).setMaxSizePolicy(MaxSizePolicy.PER_NODE))\n        .setMergePolicyConfig(new MergePolicyConfig(PutIfAbsentMergePolicy.class.getName(), 100));\n    Config config = new Config();\n    config.addMapConfig(eventStoreMap);\n    config.addMapConfig(sentNotificationsMap);\n    config.setProperty("hazelcast.jmx", "true");\n    // WARNING: This setups a local cluster, you change it to fit your needs.\n    config.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(false);\n    TcpIpConfig tcpIpConfig = config.getNetworkConfig().getJoin().getTcpIpConfig();\n    tcpIpConfig.setEnabled(true);\n    tcpIpConfig.setMembers(singletonList("127.0.0.1"));\n    return config;\n}\n'})}),"\n",(0,n.jsx)(c.G,{title:"Hazelcast configuration options",properties:a.qo,exclusive:!1,filter:["hazelcast"]})]})}function g(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},617:(e,t,i)=>{i.d(t,{G:()=>p});const o=(e,t,i=!0)=>i?e.filter((e=>!n(e.name,t))):e.filter((e=>n(e.name,t)));function n(e,t){const i=e.toLowerCase();return t.some((e=>i.includes(e.toLowerCase())))}const r={propertyTable:"propertyTable_hs59",propertyCell:"propertyCell_Qyd3"};var a=i(6540);const s={copyButton:"copyButton_GOA5",icon:"icon_tewQ"};var c=i(4848);function d({text:e}){const[t,i]=(0,a.useState)(!1);return(0,c.jsx)("button",{className:s.copyButton,onClick:async()=>{try{await navigator.clipboard.writeText(e),i(!0),setTimeout((()=>i(!1)),2e3)}catch(t){console.error("Failed to copy: ",t)}},title:"Copy",children:t?(0,c.jsx)(c.Fragment,{children:(0,c.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",fill:"currentColor",viewBox:"0 0 16 16",className:s.icon,children:(0,c.jsx)("path",{d:"M13.485 1.929a.75.75 0 0 1 0 1.06L6.06 10.414a.75.75 0 0 1-1.06 0L2.515 7.94a.75.75 0 1 1 1.06-1.06L6 9.293l6.425-6.425a.75.75 0 0 1 1.06 0z"})})}):(0,c.jsx)(c.Fragment,{children:(0,c.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",fill:"currentColor",viewBox:"0 0 16 16",className:s.icon,children:[(0,c.jsx)("path",{d:"M10 1H2a1 1 0 0 0-1 1v11h2V3h7V1z"}),(0,c.jsx)("path",{d:"M13 3H5a1 1 0 0 0-1 1v11h9a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1zM5 14V4h8v10H5z"})]})})})}function p({title:e,properties:t,filter:i=[],exclusive:n=!0,additionalProperties:a=[]}){const s=[...o(t,i,n).sort(((e,t)=>e.name.length-t.name.length||e.name.localeCompare(t.name))),...a];return(0,c.jsxs)("table",{className:r.propertyTable,children:[e&&(0,c.jsx)("caption",{children:e}),(0,c.jsx)("thead",{children:(0,c.jsxs)("tr",{children:[(0,c.jsx)("th",{children:"Property"}),(0,c.jsx)("th",{children:"Description"})]})}),(0,c.jsx)("tbody",{children:s.map((e=>{return(0,c.jsx)(c.Fragment,{children:(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{className:r.propertyCell,children:(0,c.jsxs)("div",{children:[(0,c.jsx)(d,{text:e.name}),(0,c.jsx)("code",{children:e.name})]})}),(0,c.jsxs)("td",{children:[(0,c.jsx)("p",{dangerouslySetInnerHTML:{__html:e.description}}),(t=e,console.log(t.defaultValue,typeof t.defaultValue),console.log(t.type,typeof t.type),(t.defaultValue||t.type)&&(0,c.jsxs)("dl",{children:[e.type&&(0,c.jsxs)("div",{children:[(0,c.jsxs)("dt",{children:[(0,c.jsx)("span",{style:{fontStyle:"italic"},children:"Type:"}),"\xa0"]}),(0,c.jsx)("dd",{children:(0,c.jsx)("code",{children:e.type})})]}),e.defaultValue&&(0,c.jsxs)("div",{children:[(0,c.jsxs)("dt",{children:[(0,c.jsx)("span",{style:{fontStyle:"italic"},children:"Default:"}),"\xa0"]}),(0,c.jsx)("dd",{children:(0,c.jsx)("code",{children:JSON.stringify(e.defaultValue)})})]})]}))]})]},e.name)});var t}))})]})}},8453:(e,t,i)=>{i.d(t,{R:()=>a,x:()=>s});var o=i(6540);const n={},r=o.createContext(n);function a(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),o.createElement(r.Provider,{value:t},e.children)}},9874:e=>{e.exports=JSON.parse('{"qo":[{"name":"spring.boot.admin.context-path","type":"java.lang.String","description":"The context-path prefixes the path where the Admin Servers static assets and api should be served, relative to the Dispatcher-Servlet.","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties","defaultValue":""},{"name":"spring.boot.admin.hazelcast.enabled","type":"java.lang.Boolean","description":"Enable Hazelcast support.","defaultValue":"true"},{"name":"spring.boot.admin.hazelcast.event-store","type":"java.lang.String","description":"Name of backing Hazelcast-Map for storing the instance events.","defaultValue":"spring-boot-admin-application-store"},{"name":"spring.boot.admin.hazelcast.sent-notifications","type":"java.lang.String","description":"Name of backing Hazelcast-Map for storing the sent notifications.","defaultValue":"spring-boot-admin-sent-notifications"},{"name":"spring.boot.admin.instance-auth.default-password","type":"java.lang.String","description":"Default userpassword used for authentication to each instance. Individual values for specific instances can be overriden using `spring.boot.admin.instance-auth.service-map.*.user-password`. <br/> Default: null","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$InstanceAuthProperties"},{"name":"spring.boot.admin.instance-auth.default-user-name","type":"java.lang.String","description":"Default username used for authentication to each instance. Individual values for specific instances can be overriden using `spring.boot.admin.instance-auth.service-map.*.user-name`. <br/> Default: null","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$InstanceAuthProperties"},{"name":"spring.boot.admin.instance-auth.enabled","type":"java.lang.Boolean","description":"Whether or not to use configuration properties as a source for instance credentials <br/> Default: true","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$InstanceAuthProperties","defaultValue":true},{"name":"spring.boot.admin.instance-auth.service-map","type":"java.util.Map<java.lang.String,de.codecentric.boot.admin.server.web.client.BasicAuthHttpHeaderProvider$InstanceCredentials>","description":"Map of instance credentials per registered service name","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$InstanceAuthProperties"},{"name":"spring.boot.admin.instance-proxy.ignored-headers","type":"java.util.Set<java.lang.String>","description":"Headers not to be forwarded when making requests to clients.","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$InstanceProxyProperties"},{"name":"spring.boot.admin.metadata-keys-to-sanitize","type":"java.lang.String[]","description":"The metadata keys which should be sanitized when serializing to json","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties","defaultValue":[".*password$",".*secret$",".*key$",".*token$",".*credentials.*",".*vcap_services$"]},{"name":"spring.boot.admin.monitor.default-retries","type":"java.lang.Integer","description":"Default number of retries for failed requests. Individual values for specific endpoints can be overriden using `spring.boot.admin.monitor.retries.*`.","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$MonitorProperties","defaultValue":0},{"name":"spring.boot.admin.monitor.default-timeout","type":"java.time.Duration","description":"Default timeout when making requests. Individual values for specific endpoints can be overriden using `spring.boot.admin.monitor.timeout.*`.","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$MonitorProperties","defaultValue":"10000ms"},{"name":"spring.boot.admin.monitor.info-interval","type":"java.time.Duration","description":"Time interval to check the info of instances,","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$MonitorProperties","defaultValue":"1m"},{"name":"spring.boot.admin.monitor.info-lifetime","type":"java.time.Duration","description":"Lifetime of info. The info won\'t be updated as long the last info isn\'t expired.","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$MonitorProperties","defaultValue":"1m"},{"name":"spring.boot.admin.monitor.info-max-backoff","type":"java.time.Duration","description":"The maximal backoff for info check retries (retry after error has exponential backoff, minimum backoff is 1 second).","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$MonitorProperties","defaultValue":"10m"},{"name":"spring.boot.admin.monitor.retries","type":"java.util.Map<java.lang.String,java.lang.Integer>","description":"Number of retries per endpointId. Defaults to default-retry.","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$MonitorProperties"},{"name":"spring.boot.admin.monitor.status-interval","type":"java.time.Duration","description":"Time interval to check the status of instances, must be greater than 1 second.","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$MonitorProperties","defaultValue":"10000ms"},{"name":"spring.boot.admin.monitor.status-lifetime","type":"java.time.Duration","description":"Lifetime of status. The status won\'t be updated as long the last status isn\'t expired.","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$MonitorProperties","defaultValue":"10000ms"},{"name":"spring.boot.admin.monitor.status-max-backoff","type":"java.time.Duration","description":"The maximal backoff for status check retries (retry after error has exponential backoff, minimum backoff is 1 second).","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$MonitorProperties","defaultValue":"60000ms"},{"name":"spring.boot.admin.monitor.timeout","type":"java.util.Map<java.lang.String,java.time.Duration>","description":"timeout per endpointId. Defaults to default-timeout.","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$MonitorProperties"},{"name":"spring.boot.admin.notify.dingtalk.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.DingTalkNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.dingtalk.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.DingTalkNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.dingtalk.message","type":"java.lang.String","sourceType":"de.codecentric.boot.admin.server.notify.DingTalkNotifier"},{"name":"spring.boot.admin.notify.dingtalk.secret","type":"java.lang.String","description":"Secret for DingTalk.","sourceType":"de.codecentric.boot.admin.server.notify.DingTalkNotifier"},{"name":"spring.boot.admin.notify.dingtalk.webhook-url","type":"java.lang.String","description":"Webhook URI for the DingTalk API.","sourceType":"de.codecentric.boot.admin.server.notify.DingTalkNotifier"},{"name":"spring.boot.admin.notify.discord.avatar-url","type":"java.lang.String","description":"Optional URL to avatar.","sourceType":"de.codecentric.boot.admin.server.notify.DiscordNotifier"},{"name":"spring.boot.admin.notify.discord.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.DiscordNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.discord.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.DiscordNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.discord.message","type":"java.lang.String","sourceType":"de.codecentric.boot.admin.server.notify.DiscordNotifier"},{"name":"spring.boot.admin.notify.discord.tts","type":"java.lang.Boolean","description":"If the message is a text to speech message. False by default.","sourceType":"de.codecentric.boot.admin.server.notify.DiscordNotifier","defaultValue":false},{"name":"spring.boot.admin.notify.discord.username","type":"java.lang.String","description":"Optional username. Default is set in Discord.","sourceType":"de.codecentric.boot.admin.server.notify.DiscordNotifier"},{"name":"spring.boot.admin.notify.discord.webhook-url","type":"java.net.URI","description":"Webhook URI for the Discord API (i.e. https://discordapp.com/api/webhooks/{webhook.id}/{webhook.token})","sourceType":"de.codecentric.boot.admin.server.notify.DiscordNotifier"},{"name":"spring.boot.admin.notify.feishu.at-all","type":"java.lang.Boolean","description":"@ all.","sourceType":"de.codecentric.boot.admin.server.notify.FeiShuNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.feishu.card.theme-color","type":"java.lang.String","sourceType":"de.codecentric.boot.admin.server.notify.FeiShuNotifier$Card","defaultValue":"red"},{"name":"spring.boot.admin.notify.feishu.card.title","type":"java.lang.String","description":"This is header title.","sourceType":"de.codecentric.boot.admin.server.notify.FeiShuNotifier$Card","defaultValue":"Codecentric\'s Spring Boot Admin notice"},{"name":"spring.boot.admin.notify.feishu.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.FeiShuNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.feishu.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.FeiShuNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.feishu.message","type":"java.lang.String","sourceType":"de.codecentric.boot.admin.server.notify.FeiShuNotifier"},{"name":"spring.boot.admin.notify.feishu.message-type","type":"de.codecentric.boot.admin.server.notify.FeiShuNotifier$MessageType","description":"FeiShu message type: text(\u6587\u672c) interactive(\u6d88\u606f\u5361\u7247)","sourceType":"de.codecentric.boot.admin.server.notify.FeiShuNotifier","defaultValue":"interactive"},{"name":"spring.boot.admin.notify.feishu.secret","type":"java.lang.String","description":"The secret of the chat group robot from the FeiShu setup.","sourceType":"de.codecentric.boot.admin.server.notify.FeiShuNotifier"},{"name":"spring.boot.admin.notify.feishu.webhook-url","type":"java.net.URI","description":"Webhook URL for the FeiShu(\u98de\u4e66) chat group API (i.e. https://open.feishu.cn/open-apis/bot/v2/hook/xxx).","sourceType":"de.codecentric.boot.admin.server.notify.FeiShuNotifier"},{"name":"spring.boot.admin.notify.hipchat.auth-token","type":"java.lang.String","description":"API token that has access to notify in the room","sourceType":"de.codecentric.boot.admin.server.notify.HipchatNotifier"},{"name":"spring.boot.admin.notify.hipchat.description","type":"java.lang.String","description":"Trigger description. SpEL template using event as root;","sourceType":"de.codecentric.boot.admin.server.notify.HipchatNotifier"},{"name":"spring.boot.admin.notify.hipchat.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.HipchatNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.hipchat.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.HipchatNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.hipchat.notify","type":"java.lang.Boolean","description":"TRUE will cause OS notification, FALSE will only notify to room","sourceType":"de.codecentric.boot.admin.server.notify.HipchatNotifier","defaultValue":false},{"name":"spring.boot.admin.notify.hipchat.room-id","type":"java.lang.String","description":"Id of the room to notify","sourceType":"de.codecentric.boot.admin.server.notify.HipchatNotifier"},{"name":"spring.boot.admin.notify.hipchat.url","type":"java.net.URI","description":"Base URL for HipChat API (i.e. https://ACCOUNT_NAME.hipchat.com/v2","sourceType":"de.codecentric.boot.admin.server.notify.HipchatNotifier"},{"name":"spring.boot.admin.notify.letschat.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.LetsChatNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.letschat.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.LetsChatNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.letschat.message","type":"java.lang.String","description":"Message template. SpEL template using event as root","sourceType":"de.codecentric.boot.admin.server.notify.LetsChatNotifier"},{"name":"spring.boot.admin.notify.letschat.room","type":"java.lang.String","description":"Name of the room","sourceType":"de.codecentric.boot.admin.server.notify.LetsChatNotifier"},{"name":"spring.boot.admin.notify.letschat.token","type":"java.lang.String","description":"Token for the Let\xb4s chat API","sourceType":"de.codecentric.boot.admin.server.notify.LetsChatNotifier"},{"name":"spring.boot.admin.notify.letschat.url","type":"java.net.URI","description":"Host URL for Let\xb4s Chat","sourceType":"de.codecentric.boot.admin.server.notify.LetsChatNotifier"},{"name":"spring.boot.admin.notify.letschat.username","type":"java.lang.String","description":"username which sends notification","sourceType":"de.codecentric.boot.admin.server.notify.LetsChatNotifier","defaultValue":"Spring Boot Admin"},{"name":"spring.boot.admin.notify.mail.additional-properties","type":"java.util.Map<java.lang.String,java.lang.Object>","description":"Additional properties to be set for the template","sourceType":"de.codecentric.boot.admin.server.notify.MailNotifier"},{"name":"spring.boot.admin.notify.mail.base-url","type":"java.lang.String","description":"Base-URL used for hyperlinks in mail","sourceType":"de.codecentric.boot.admin.server.notify.MailNotifier"},{"name":"spring.boot.admin.notify.mail.cc","type":"java.lang.String[]","description":"cc-recipients of the mail","sourceType":"de.codecentric.boot.admin.server.notify.MailNotifier","defaultValue":[]},{"name":"spring.boot.admin.notify.mail.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.MailNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.mail.from","type":"java.lang.String","description":"sender of the change","sourceType":"de.codecentric.boot.admin.server.notify.MailNotifier","defaultValue":"Spring Boot Admin <noreply@localhost>"},{"name":"spring.boot.admin.notify.mail.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.MailNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.mail.template","type":"java.lang.String","description":"Thymeleaf template for mail","sourceType":"de.codecentric.boot.admin.server.notify.MailNotifier","defaultValue":"META-INF/spring-boot-admin-server/mail/status-changed.html"},{"name":"spring.boot.admin.notify.mail.to","type":"java.lang.String[]","description":"recipients of the mail","sourceType":"de.codecentric.boot.admin.server.notify.MailNotifier","defaultValue":["root@localhost"]},{"name":"spring.boot.admin.notify.ms-teams.de-registered-title","type":"java.lang.String","description":"Title of the Teams message when an app de-registers","sourceType":"de.codecentric.boot.admin.server.notify.MicrosoftTeamsNotifier","defaultValue":"De-Registered"},{"name":"spring.boot.admin.notify.ms-teams.deregister-activity-subtitle","type":"java.lang.String","description":"Message will be used as title of the Activity section of the Teams message when an app de-registers.","sourceType":"de.codecentric.boot.admin.server.notify.MicrosoftTeamsNotifier"},{"name":"spring.boot.admin.notify.ms-teams.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.MicrosoftTeamsNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.ms-teams.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.MicrosoftTeamsNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.ms-teams.message-summary","type":"java.lang.String","description":"Summary section of every Teams message originating from Spring Boot Admin","sourceType":"de.codecentric.boot.admin.server.notify.MicrosoftTeamsNotifier","defaultValue":"Spring Boot Admin Notification"},{"name":"spring.boot.admin.notify.ms-teams.register-activity-subtitle","type":"java.lang.String","description":"Message will be used as title of the Activity section of the Teams message when an app registers","sourceType":"de.codecentric.boot.admin.server.notify.MicrosoftTeamsNotifier"},{"name":"spring.boot.admin.notify.ms-teams.registered-title","type":"java.lang.String","description":"Title of the Teams message when an app registers","sourceType":"de.codecentric.boot.admin.server.notify.MicrosoftTeamsNotifier","defaultValue":"Registered"},{"name":"spring.boot.admin.notify.ms-teams.status-activity-subtitle","type":"java.lang.String","description":"Message will be used as title of the Activity section of the Teams message when an app changes status","sourceType":"de.codecentric.boot.admin.server.notify.MicrosoftTeamsNotifier"},{"name":"spring.boot.admin.notify.ms-teams.status-changed-title","type":"java.lang.String","description":"Title of the Teams message when an app changes status","sourceType":"de.codecentric.boot.admin.server.notify.MicrosoftTeamsNotifier","defaultValue":"Status Changed"},{"name":"spring.boot.admin.notify.ms-teams.theme-color","type":"java.lang.String","description":"Theme Color is the color of the accent on the message that appears in Microsoft Teams. Default is Spring Green","sourceType":"de.codecentric.boot.admin.server.notify.MicrosoftTeamsNotifier"},{"name":"spring.boot.admin.notify.ms-teams.webhook-url","type":"java.net.URI","description":"Webhook url for Microsoft Teams Channel Webhook connector (i.e. <a href=\\"https://outlook.office.com/webhook/\\">...</a>{webhook-id})","sourceType":"de.codecentric.boot.admin.server.notify.MicrosoftTeamsNotifier"},{"name":"spring.boot.admin.notify.opsgenie.actions","type":"java.lang.String","description":"Comma separated list of actions that can be executed.","sourceType":"de.codecentric.boot.admin.server.notify.OpsGenieNotifier"},{"name":"spring.boot.admin.notify.opsgenie.api-key","type":"java.lang.String","description":"Integration ApiKey","sourceType":"de.codecentric.boot.admin.server.notify.OpsGenieNotifier"},{"name":"spring.boot.admin.notify.opsgenie.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.OpsGenieNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.opsgenie.entity","type":"java.lang.String","description":"The entity the alert is related to.","sourceType":"de.codecentric.boot.admin.server.notify.OpsGenieNotifier"},{"name":"spring.boot.admin.notify.opsgenie.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.OpsGenieNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.opsgenie.source","type":"java.lang.String","description":"Field to specify source of alert. By default, it will be assigned to IP address of incoming request","sourceType":"de.codecentric.boot.admin.server.notify.OpsGenieNotifier"},{"name":"spring.boot.admin.notify.opsgenie.tags","type":"java.lang.String","description":"Comma separated list of labels attached to the alert","sourceType":"de.codecentric.boot.admin.server.notify.OpsGenieNotifier"},{"name":"spring.boot.admin.notify.opsgenie.url","type":"java.net.URI","description":"BASE URL for OpsGenie API","sourceType":"de.codecentric.boot.admin.server.notify.OpsGenieNotifier","defaultValue":"https://api.opsgenie.com/v2/alerts"},{"name":"spring.boot.admin.notify.opsgenie.user","type":"java.lang.String","description":"Default owner of the execution. If user is not specified, the system becomes owner of the execution.","sourceType":"de.codecentric.boot.admin.server.notify.OpsGenieNotifier"},{"name":"spring.boot.admin.notify.pagerduty.client","type":"java.lang.String","description":"Client for pagerduty-REST-API","sourceType":"de.codecentric.boot.admin.server.notify.PagerdutyNotifier"},{"name":"spring.boot.admin.notify.pagerduty.client-url","type":"java.net.URI","description":"Client-url for pagerduty-REST-API","sourceType":"de.codecentric.boot.admin.server.notify.PagerdutyNotifier"},{"name":"spring.boot.admin.notify.pagerduty.description","type":"java.lang.String","description":"Trigger description. SpEL template using event as root;","sourceType":"de.codecentric.boot.admin.server.notify.PagerdutyNotifier"},{"name":"spring.boot.admin.notify.pagerduty.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.PagerdutyNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.pagerduty.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.PagerdutyNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.pagerduty.service-key","type":"java.lang.String","description":"Service-Key for pagerduty-REST-API","sourceType":"de.codecentric.boot.admin.server.notify.PagerdutyNotifier"},{"name":"spring.boot.admin.notify.pagerduty.url","type":"java.net.URI","description":"URI for pagerduty-REST-API","sourceType":"de.codecentric.boot.admin.server.notify.PagerdutyNotifier","defaultValue":"https://events.pagerduty.com/generic/2010-04-15/create_event.json"},{"name":"spring.boot.admin.notify.proxy.host","type":"java.lang.String","description":"Proxy-Host for sending notifications","sourceType":"de.codecentric.boot.admin.server.notify.NotifierProxyProperties"},{"name":"spring.boot.admin.notify.proxy.password","type":"java.lang.String","description":"Proxy-Password for sending notifications (if proxy requires authentication).","sourceType":"de.codecentric.boot.admin.server.notify.NotifierProxyProperties"},{"name":"spring.boot.admin.notify.proxy.port","type":"java.lang.Integer","description":"Proxy-Port for sending notifications","sourceType":"de.codecentric.boot.admin.server.notify.NotifierProxyProperties","defaultValue":0},{"name":"spring.boot.admin.notify.proxy.username","type":"java.lang.String","description":"Proxy-User for sending notifications (if proxy requires authentication).","sourceType":"de.codecentric.boot.admin.server.notify.NotifierProxyProperties"},{"name":"spring.boot.admin.notify.rocketchat.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.RocketChatNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.rocketchat.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.RocketChatNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.rocketchat.room-id","type":"java.lang.String","description":"Room Id to send message","sourceType":"de.codecentric.boot.admin.server.notify.RocketChatNotifier"},{"name":"spring.boot.admin.notify.rocketchat.token","type":"java.lang.String","description":"Token for RocketChat API","sourceType":"de.codecentric.boot.admin.server.notify.RocketChatNotifier"},{"name":"spring.boot.admin.notify.rocketchat.url","type":"java.lang.String","description":"Host URL for RocketChat server","sourceType":"de.codecentric.boot.admin.server.notify.RocketChatNotifier"},{"name":"spring.boot.admin.notify.rocketchat.user-id","type":"java.lang.String","description":"User Id for RocketChat API","sourceType":"de.codecentric.boot.admin.server.notify.RocketChatNotifier"},{"name":"spring.boot.admin.notify.slack.channel","type":"java.lang.String","description":"Optional channel name without # sign (i.e. somechannel)","sourceType":"de.codecentric.boot.admin.server.notify.SlackNotifier"},{"name":"spring.boot.admin.notify.slack.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.SlackNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.slack.icon","type":"java.lang.String","description":"Optional emoji icon without colons (i.e. my-emoji)","sourceType":"de.codecentric.boot.admin.server.notify.SlackNotifier"},{"name":"spring.boot.admin.notify.slack.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.SlackNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.slack.message","type":"java.lang.String","description":"Message formatted using Slack markups. SpEL template using event as root","sourceType":"de.codecentric.boot.admin.server.notify.SlackNotifier"},{"name":"spring.boot.admin.notify.slack.username","type":"java.lang.String","description":"Optional username which sends notification","sourceType":"de.codecentric.boot.admin.server.notify.SlackNotifier","defaultValue":"Spring Boot Admin"},{"name":"spring.boot.admin.notify.slack.webhook-url","type":"java.net.URI","description":"Webhook url for Slack API (i.e. https://hooks.slack.com/services/xxx)","sourceType":"de.codecentric.boot.admin.server.notify.SlackNotifier"},{"name":"spring.boot.admin.notify.telegram.api-url","type":"java.lang.String","description":"base url for telegram (i.e. https://api.telegram.org)","sourceType":"de.codecentric.boot.admin.server.notify.TelegramNotifier","defaultValue":"https://api.telegram.org"},{"name":"spring.boot.admin.notify.telegram.auth-token","type":"java.lang.String","description":"The token identifying und authorizing your Telegram bot (e.g. `123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11`)","sourceType":"de.codecentric.boot.admin.server.notify.TelegramNotifier"},{"name":"spring.boot.admin.notify.telegram.chat-id","type":"java.lang.String","description":"Unique identifier for the target chat or username of the target channel","sourceType":"de.codecentric.boot.admin.server.notify.TelegramNotifier"},{"name":"spring.boot.admin.notify.telegram.disable-notify","type":"java.lang.Boolean","description":"If true users will receive a notification with no sound.","sourceType":"de.codecentric.boot.admin.server.notify.TelegramNotifier","defaultValue":false},{"name":"spring.boot.admin.notify.telegram.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.TelegramNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.telegram.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.TelegramNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.telegram.parse-mode","type":"java.lang.String","description":"Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in your bot\'s message.","sourceType":"de.codecentric.boot.admin.server.notify.TelegramNotifier","defaultValue":"HTML"},{"name":"spring.boot.admin.notify.webex.auth-token","type":"java.lang.String","description":"Bearer authentication token for Webex API","sourceType":"de.codecentric.boot.admin.server.notify.WebexNotifier"},{"name":"spring.boot.admin.notify.webex.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.WebexNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.webex.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.WebexNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.webex.room-id","type":"java.lang.String","description":"Room identifier in Webex where the message will be sent","sourceType":"de.codecentric.boot.admin.server.notify.WebexNotifier"},{"name":"spring.boot.admin.notify.webex.url","type":"java.net.URI","description":"base url for Webex API (i.e. https://webexapis.com/v1/messages)","sourceType":"de.codecentric.boot.admin.server.notify.WebexNotifier","defaultValue":"https://webexapis.com/v1/messages"},{"name":"spring.boot.admin.probed-endpoints","type":"java.lang.String[]","description":"For Spring Boot 2.x applications the endpoints should be discovered automatically using the actuator links. For Spring Boot 1.x applications SBA probes for the specified endpoints using an OPTIONS request. If the path differs from the id you can specify this as id:path (e.g. health:ping).","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties","defaultValue":["health","env","metrics","httptrace:trace","httptrace","threaddump:dump","threaddump","jolokia","info","logfile","refresh","flyway","liquibase","heapdump","loggers","auditevents","mappings","scheduledtasks","configprops","caches","beans"]},{"name":"spring.boot.admin.server.enabled","type":"java.lang.Boolean","description":"Enable Spring Boot Admin Server Default: true","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$ServerProperties","defaultValue":true},{"name":"spring.boot.admin.monitor.connect-timeout","type":"java.lang.Long","deprecated":true,"deprecation":{"level":"error","replacement":"spring.boot.admin.monitor.default-timeout"}},{"name":"spring.boot.admin.monitor.period","type":"java.lang.Long","deprecated":true,"deprecation":{"level":"warning","replacement":"spring.boot.admin.monitor.status-interval"}},{"name":"spring.boot.admin.monitor.read-timeout","type":"java.lang.Long","deprecated":true,"deprecation":{"level":"error","replacement":"spring.boot.admin.monitor.default-timeout"}}]}')}}]);