"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[1819],{6787:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"client/sba-client","title":"Spring Boot Admin Client","description":"The Spring Boot Admin Client is a Spring Boot Starter that registers itself with the Spring Boot Admin Server to","source":"@site/docs/client/01-sba-client.mdx","sourceDirName":"client","slug":"/client/sba-client","permalink":"/3.5.4/docs/client/sba-client","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_custom_props":{"icon":"server"}},"sidebar":"tutorialSidebar","previous":{"title":"Registering Clients","permalink":"/3.5.4/docs/client/"},"next":{"title":"Configuration","permalink":"/3.5.4/docs/client/configuration"}}');var r=n(4848),o=n(8453);const a=JSON.parse('{"qo":[{"name":"spring.boot.admin.client.api-path","type":"java.lang.String","description":"The admin rest-apis path.","sourceType":"de.codecentric.boot.admin.client.config.ClientProperties","defaultValue":"instances"},{"name":"spring.boot.admin.client.auto-deregistration","type":"java.lang.Boolean","description":"Enable automatic deregistration on shutdown If not set it defaults to true if an active {@link CloudPlatform} is present;","sourceType":"de.codecentric.boot.admin.client.config.ClientProperties"},{"name":"spring.boot.admin.client.auto-registration","type":"java.lang.Boolean","description":"Enable automatic registration when the application is ready.","sourceType":"de.codecentric.boot.admin.client.config.ClientProperties","defaultValue":true},{"name":"spring.boot.admin.client.connect-timeout","type":"java.time.Duration","description":"Connect timeout for the registration.","sourceType":"de.codecentric.boot.admin.client.config.ClientProperties","defaultValue":"5000ms"},{"name":"spring.boot.admin.client.enabled","type":"java.lang.Boolean","description":"Enable Spring Admin Client.","sourceType":"de.codecentric.boot.admin.client.config.ClientProperties","defaultValue":"true"},{"name":"spring.boot.admin.client.instance.health-url","type":"java.lang.String","description":"Client-health-URL to register with. Inferred at runtime, can be overridden in case the reachable URL is different (e.g. Docker). Must be unique all services registry.","sourceType":"de.codecentric.boot.admin.client.config.InstanceProperties"},{"name":"spring.boot.admin.client.instance.management-base-url","type":"java.lang.String","description":"Base url for computing the management-url to register with. The path is inferred at runtime, and appended to the base url.","sourceType":"de.codecentric.boot.admin.client.config.InstanceProperties"},{"name":"spring.boot.admin.client.instance.management-url","type":"java.lang.String","description":"Management-url to register with. Inferred at runtime, can be overridden in case the reachable URL is different (e.g. Docker).","sourceType":"de.codecentric.boot.admin.client.config.InstanceProperties"},{"name":"spring.boot.admin.client.instance.metadata","type":"java.util.Map<java.lang.String,java.lang.String>","description":"Metadata that should be associated with this application","sourceType":"de.codecentric.boot.admin.client.config.InstanceProperties"},{"name":"spring.boot.admin.client.instance.name","type":"java.lang.String","description":"Name to register with. Defaults to ${spring.application.name}","sourceType":"de.codecentric.boot.admin.client.config.InstanceProperties","defaultValue":"spring-boot-application"},{"name":"spring.boot.admin.client.instance.service-base-url","type":"java.lang.String","description":"Base url for computing the service-url to register with. The path is inferred at runtime, and appended to the base url.","sourceType":"de.codecentric.boot.admin.client.config.InstanceProperties"},{"name":"spring.boot.admin.client.instance.service-host-type","type":"de.codecentric.boot.admin.client.config.ServiceHostType","description":"Should the registered urls be built with server.address or with hostname.","sourceType":"de.codecentric.boot.admin.client.config.InstanceProperties","defaultValue":"canonical-host-name"},{"name":"spring.boot.admin.client.instance.service-path","type":"java.lang.String","description":"Path for computing the service-url to register with. If not specified, defaults to \\"/\\"","sourceType":"de.codecentric.boot.admin.client.config.InstanceProperties"},{"name":"spring.boot.admin.client.instance.service-url","type":"java.lang.String","description":"Client-service-URL register with. Inferred at runtime, can be overridden in case the reachable URL is different (e.g. Docker).","sourceType":"de.codecentric.boot.admin.client.config.InstanceProperties"},{"name":"spring.boot.admin.client.password","type":"java.lang.String","description":"Password for basic authentication on admin server","sourceType":"de.codecentric.boot.admin.client.config.ClientProperties"},{"name":"spring.boot.admin.client.period","type":"java.time.Duration","description":"Time interval the registration is repeated","sourceType":"de.codecentric.boot.admin.client.config.ClientProperties","defaultValue":"10000ms"},{"name":"spring.boot.admin.client.read-timeout","type":"java.time.Duration","description":"Read timeout (in ms) for the registration.","sourceType":"de.codecentric.boot.admin.client.config.ClientProperties","defaultValue":"5000ms"},{"name":"spring.boot.admin.client.register-once","type":"java.lang.Boolean","description":"Enable registration against one or all admin servers","sourceType":"de.codecentric.boot.admin.client.config.ClientProperties","defaultValue":true},{"name":"spring.boot.admin.client.url","type":"java.lang.String[]","description":"The admin server urls to register at","sourceType":"de.codecentric.boot.admin.client.config.ClientProperties","defaultValue":[]},{"name":"spring.boot.admin.client.username","type":"java.lang.String","description":"Username for basic authentication on admin server","sourceType":"de.codecentric.boot.admin.client.config.ClientProperties"},{"name":"vcap.application.application-id","type":"java.lang.String","sourceType":"de.codecentric.boot.admin.client.config.CloudFoundryApplicationProperties"},{"name":"vcap.application.instance-index","type":"java.lang.String","sourceType":"de.codecentric.boot.admin.client.config.CloudFoundryApplicationProperties"},{"name":"vcap.application.uris","type":"java.util.List<java.lang.String>","sourceType":"de.codecentric.boot.admin.client.config.CloudFoundryApplicationProperties"},{"name":"spring.boot.admin.client.instance.prefer-ip","type":"java.lang.Boolean","description":"Should the registered urls be built with server.address or with hostname. @deprecated Use serviceHostType instead.","sourceType":"de.codecentric.boot.admin.client.config.InstanceProperties","defaultValue":false,"deprecated":true,"deprecation":{}}]}');var c=n(617);const s={sidebar_custom_props:{icon:"server"}},l="Spring Boot Admin Client",d={},p=[{value:"Properties",id:"properties",level:2}];function u(e){const t={h1:"h1",h2:"h2",header:"header",p:"p",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"spring-boot-admin-client",children:"Spring Boot Admin Client"})}),"\n",(0,r.jsx)(t.p,{children:"The Spring Boot Admin Client is a Spring Boot Starter that registers itself with the Spring Boot Admin Server to\nenable monitoring and management. By including the Spring Boot Admin Client Starter dependency in your application, the\nSpring Boot Admin Server can access health, metrics, and other management endpoints, depending on which\nActuator endpoints are accessible."}),"\n",(0,r.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n","\n",(0,r.jsx)(c.G,{properties:a.qo})]})}function m(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},617:(e,t,n)=>{n.d(t,{G:()=>d});const i=(e,t,n=!0)=>n?e.filter((e=>!r(e.name,t))):e.filter((e=>r(e.name,t)));function r(e,t){const n=e.toLowerCase();return t.some((e=>n.includes(e.toLowerCase())))}const o={propertyTable:"propertyTable_hs59",propertyCell:"propertyCell_Qyd3"};var a=n(6540);const c={copyButton:"copyButton_GOA5",icon:"icon_tewQ"};var s=n(4848);function l({text:e}){const[t,n]=(0,a.useState)(!1);return(0,s.jsx)("button",{className:c.copyButton,onClick:async()=>{try{await navigator.clipboard.writeText(e),n(!0),setTimeout((()=>n(!1)),2e3)}catch(t){console.error("Failed to copy: ",t)}},title:"Copy",children:t?(0,s.jsx)(s.Fragment,{children:(0,s.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",fill:"currentColor",viewBox:"0 0 16 16",className:c.icon,children:(0,s.jsx)("path",{d:"M13.485 1.929a.75.75 0 0 1 0 1.06L6.06 10.414a.75.75 0 0 1-1.06 0L2.515 7.94a.75.75 0 1 1 1.06-1.06L6 9.293l6.425-6.425a.75.75 0 0 1 1.06 0z"})})}):(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",fill:"currentColor",viewBox:"0 0 16 16",className:c.icon,children:[(0,s.jsx)("path",{d:"M10 1H2a1 1 0 0 0-1 1v11h2V3h7V1z"}),(0,s.jsx)("path",{d:"M13 3H5a1 1 0 0 0-1 1v11h9a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1zM5 14V4h8v10H5z"})]})})})}function d({title:e,properties:t,filter:n=[],exclusive:r=!0,additionalProperties:a=[]}){const c=[...i(t,n,r).sort(((e,t)=>e.name.length-t.name.length||e.name.localeCompare(t.name))),...a];return(0,s.jsxs)("table",{className:o.propertyTable,children:[e&&(0,s.jsx)("caption",{children:e}),(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Property"}),(0,s.jsx)("th",{children:"Description"})]})}),(0,s.jsx)("tbody",{children:c.map((e=>{return(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{className:o.propertyCell,children:(0,s.jsxs)("div",{children:[(0,s.jsx)(l,{text:e.name}),(0,s.jsx)("code",{children:e.name})]})}),(0,s.jsxs)("td",{children:[(0,s.jsx)("p",{dangerouslySetInnerHTML:{__html:e.description}}),(t=e,console.log(t.defaultValue,typeof t.defaultValue),console.log(t.type,typeof t.type),(t.defaultValue||t.type)&&(0,s.jsxs)("dl",{children:[e.type&&(0,s.jsxs)("div",{children:[(0,s.jsxs)("dt",{children:[(0,s.jsx)("span",{style:{fontStyle:"italic"},children:"Type:"}),"\xa0"]}),(0,s.jsx)("dd",{children:(0,s.jsx)("code",{children:e.type})})]}),e.defaultValue&&(0,s.jsxs)("div",{children:[(0,s.jsxs)("dt",{children:[(0,s.jsx)("span",{style:{fontStyle:"italic"},children:"Default:"}),"\xa0"]}),(0,s.jsx)("dd",{children:(0,s.jsx)("code",{children:JSON.stringify(e.defaultValue)})})]})]}))]})]},e.name)});var t}))})]})}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var i=n(6540);const r={},o=i.createContext(r);function a(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);