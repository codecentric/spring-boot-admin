"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[7855],{3903:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>d,metadata:()=>n,toc:()=>f});const n=JSON.parse('{"id":"server/notifications/index","title":"Notifications","description":"You can add your own Notifiers by adding Spring Beans which implement the Notifier interface, at best by extendingAbstractEventNotifier or AbstractStatusChangeNotifier.","source":"@site/docs/server/notifications/index.mdx","sourceDirName":"server/notifications","slug":"/server/notifications/","permalink":"/3.5.4-SNAPSHOT/docs/server/notifications/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_custom_props":{"icon":"notifications"}},"sidebar":"tutorialSidebar","previous":{"title":"Set up the Server","permalink":"/3.5.4-SNAPSHOT/docs/server/server"},"next":{"title":"DingTalk Notifications","permalink":"/3.5.4-SNAPSHOT/docs/server/notifications/notifier-dingtalk"}}');var o=t(4848),r=t(8453),a=t(9874),s=t(617),c=t(9425);const d={sidebar_position:1,sidebar_custom_props:{icon:"notifications"}},l="Notifications",p={},f=[{value:"Notification Proxy Settings",id:"notification-proxy-settings",level:2},{value:"Notification Reminder",id:"notification-reminder",level:2},{value:"Filtering Notifications",id:"filtering-notifications",level:2},{value:"Shipped Notifiers",id:"shipped-notifiers",level:2}];function m(e){const i={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.header,{children:(0,o.jsx)(i.h1,{id:"notifications",children:"Notifications"})}),"\n","\n",(0,o.jsxs)(i.p,{children:["You can add your own Notifiers by adding Spring Beans which implement the ",(0,o.jsx)(i.code,{children:"Notifier"})," interface, at best by extending",(0,o.jsx)(i.code,{children:"AbstractEventNotifier"})," or ",(0,o.jsx)(i.code,{children:"AbstractStatusChangeNotifier"}),"."]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",metastring:'title="CustomNotifier.java"',children:'public class CustomNotifier extends AbstractEventNotifier {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(CustomNotifier.class);\n\n    public CustomNotifier(InstanceRepository repository) {\n        super(repository);\n    }\n\n    @Override\n    protected Mono<Void> doNotify(InstanceEvent event, Instance instance) {\n        return Mono.fromRunnable(() -> {\n            if (event instanceof InstanceStatusChangedEvent statusChangedEvent) {\n                LOGGER.info("Instance {} ({}) is {}", instance.getRegistration().getName(), event.getInstance(),\n                        statusChangedEvent.getStatusInfo().getStatus());\n            }\n            else {\n                LOGGER.info("Instance {} ({}) {}", instance.getRegistration().getName(), event.getInstance(),\n                        event.getType());\n            }\n        });\n    }\n}\n'})}),"\n",(0,o.jsx)(i.h2,{id:"notification-proxy-settings",children:"Notification Proxy Settings"}),"\n",(0,o.jsxs)(i.p,{children:["All Notifiers which are using a ",(0,o.jsx)(i.code,{children:"RestTemplate"})," can be configured to use a proxy."]}),"\n",(0,o.jsx)(s.G,{title:"Notification Proxy configuration options",properties:a.qo,filter:["notify.proxy"],exclusive:!1}),"\n",(0,o.jsx)(i.h2,{id:"notification-reminder",children:"Notification Reminder"}),"\n",(0,o.jsxs)(i.p,{children:["The ",(0,o.jsx)(i.code,{children:"RemindingNotifier"})," sends reminders for down/offline applications, it delegates the sending of notifications to another notifier."]}),"\n",(0,o.jsxs)(i.p,{children:["By default, a reminder is triggered when a registered application changes to ",(0,o.jsx)(i.code,{children:"DOWN"})," or ",(0,o.jsx)(i.code,{children:"OFFLINE"}),". You can alter this behaviour via ",(0,o.jsx)(i.code,{children:"setReminderStatuses()"}),". The reminder ends when either the status changes to a non-triggering status or the regarding application gets deregistered."]}),"\n",(0,o.jsxs)(i.p,{children:["By default, the reminders are sent every 10 minutes, to change this use ",(0,o.jsx)(i.code,{children:"setReminderPeriod()"}),". The ",(0,o.jsx)(i.code,{children:"RemindingNotifier"})," itself doesn\u2019t start the background thread to send the reminders, you need to take care of this as shown in the given example below;"]}),"\n",(0,o.jsx)(i.p,{children:"How to configure reminders"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",metastring:'title="NotifierConfiguration.java"',children:'@Configuration\npublic class NotifierConfiguration {\n    @Autowired\n    private Notifier notifier;\n\n    @Primary\n    @Bean(initMethod = "start", destroyMethod = "stop")\n    public RemindingNotifier remindingNotifier() {\n        RemindingNotifier notifier = new RemindingNotifier(notifier, repository);\n        notifier.setReminderPeriod(Duration.ofMinutes(10)); // (1)\n        notifier.setCheckReminderInverval(Duration.ofSeconds(10)); //(2)\n        return notifier;\n    }\n}\n'})}),"\n",(0,o.jsxs)(i.ol,{children:["\n",(0,o.jsx)(i.li,{children:"The reminders will be sent every 10 minutes."}),"\n",(0,o.jsx)(i.li,{children:"Schedules sending of due reminders every 10 seconds."}),"\n"]}),"\n",(0,o.jsx)(i.h2,{id:"filtering-notifications",children:"Filtering Notifications"}),"\n",(0,o.jsxs)(i.p,{children:["The ",(0,o.jsx)(i.code,{children:"FilteringNotifier"})," allows you to filter certain notification based on rules you can add/remove at runtime. It delegates the sending of notifications to another notifier."]}),"\n",(0,o.jsxs)(i.p,{children:["If you add a ",(0,o.jsx)(i.code,{children:"FilteringNotifier"})," to your ",(0,o.jsx)(i.code,{children:"ApplicationContext"})," a RESTful interface on ",(0,o.jsx)(i.code,{children:"notifications/filter"})," gets available. The restful interface provides the following methods for getting, adding, and deleting notification filters:"]}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:(0,o.jsx)(i.code,{children:"GET notifications/filter"})}),"\n",(0,o.jsxs)(i.li,{children:["Returns a list of all registered notification filters. Each containing the attributes ",(0,o.jsx)(i.code,{children:"id"}),", ",(0,o.jsx)(i.code,{children:"applicationName"}),", ",(0,o.jsx)(i.code,{children:"expiry"}),", and ",(0,o.jsx)(i.code,{children:"expired"}),"."]}),"\n",(0,o.jsx)(i.li,{children:(0,o.jsx)(i.code,{children:"POST notifications/filters?instanceId=<yourInstanceId>&applicationName=<yourApplicationName>&ttl=<yourInstant>"})}),"\n",(0,o.jsxs)(i.li,{children:["Posts a new notification filter for the application/instance of the given ",(0,o.jsx)(i.code,{children:"instanceId"})," or ",(0,o.jsx)(i.code,{children:"applicationName"}),". Either ",(0,o.jsx)(i.code,{children:"instanceId"})," or ",(0,o.jsx)(i.code,{children:"applicationName"})," must be set. The parameter ",(0,o.jsx)(i.code,{children:"ttl"})," is optional and represents the expiration of the filter as an instant (the number of seconds from the epoch of ",(0,o.jsx)(i.code,{children:"1970-01-01T00:00:00Z"}),")."]}),"\n",(0,o.jsx)(i.li,{children:(0,o.jsx)(i.code,{children:"DELETE notifications/filters/{id}"})}),"\n",(0,o.jsx)(i.li,{children:"Deletes the notification filter with the requested id from the filters."}),"\n"]}),"\n",(0,o.jsx)(i.p,{children:"You may as well access all notification filter configurations via the main applications view inside SBA client, as seen in the screenshot below."}),"\n",(0,o.jsx)(i.p,{children:(0,o.jsx)(i.img,{alt:"Sample notification filters",src:t(4533).A+"",width:"3126",height:"802"})}),"\n",(0,o.jsxs)(i.p,{children:["A ",(0,o.jsx)(i.code,{children:"FilteringNotifier"})," might be useful, for instance, if you don\u2019t want to receive notifications when deploying your applications. Before stopping the application, you can add an (expiring) filter via a ",(0,o.jsx)(i.code,{children:"POST"})," request."]}),"\n",(0,o.jsx)(i.p,{children:"How to configure filtering"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",metastring:'title="NotifierConfig.java"',children:'@Configuration(proxyBeanMethods = false)\npublic class NotifierConfig {\n\n    private final InstanceRepository repository;\n\n    private final ObjectProvider<List<Notifier>> otherNotifiers;\n\n    public NotifierConfig(InstanceRepository repository, ObjectProvider<List<Notifier>> otherNotifiers) {\n        this.repository = repository;\n        this.otherNotifiers = otherNotifiers;\n    }\n\n    @Bean\n    public FilteringNotifier filteringNotifier() { // (1)\n        CompositeNotifier delegate = new CompositeNotifier(this.otherNotifiers.getIfAvailable(Collections::emptyList));\n        return new FilteringNotifier(delegate, this.repository);\n    }\n\n    @Primary\n    @Bean(initMethod = "start", destroyMethod = "stop")\n    public RemindingNotifier remindingNotifier() { // (2)\n        RemindingNotifier notifier = new RemindingNotifier(filteringNotifier(), this.repository);\n        notifier.setReminderPeriod(Duration.ofMinutes(10));\n        notifier.setCheckReminderInverval(Duration.ofSeconds(10));\n        return notifier;\n    }\n\n}\n'})}),"\n",(0,o.jsxs)(i.ol,{children:["\n",(0,o.jsxs)(i.li,{children:["Add the ",(0,o.jsx)(i.code,{children:"FilteringNotifier"})," bean using a delegate (e.g. ",(0,o.jsx)(i.code,{children:"MailNotifier"})," when configured)"]}),"\n",(0,o.jsxs)(i.li,{children:["Add the ",(0,o.jsx)(i.code,{children:"RemindingNotifier"})," as primary bean using the ",(0,o.jsx)(i.code,{children:"FilteringNotifier"})," as delegate."]}),"\n"]}),"\n",(0,o.jsx)(i.admonition,{type:"tip",children:(0,o.jsx)(i.p,{children:"This example combines the reminding and filtering notifiers. This allows you to get notifications after the deployed application hasn\u2019t restarted in a certain amount of time (until the filter expires)."})}),"\n",(0,o.jsx)(i.h2,{id:"shipped-notifiers",children:"Shipped Notifiers"}),"\n",(0,o.jsx)(c.A,{})]})}function u(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},9425:(e,i,t)=>{t.d(i,{A:()=>I});var n=t(6540),o=t(4164),r=t(4718),a=t(8774),s=t(4586);const c=["zero","one","two","few","many","other"];function d(e){return c.filter((i=>e.includes(i)))}const l={locale:"en",pluralForms:d(["one","other"]),select:e=>1===e?"one":"other"};function p(){const{i18n:{currentLocale:e}}=(0,s.A)();return(0,n.useMemo)((()=>{try{return function(e){const i=new Intl.PluralRules(e);return{locale:e,pluralForms:d(i.resolvedOptions().pluralCategories),select:e=>i.select(e)}}(e)}catch(i){return console.error(`Failed to use Intl.PluralRules for locale "${e}".\nDocusaurus will fallback to the default (English) implementation.\nError: ${i.message}\n`),l}}),[e])}function f(){const e=p();return{selectMessage:(i,t)=>function(e,i,t){const n=e.split("|");if(1===n.length)return n[0];n.length>t.pluralForms.length&&console.error(`For locale=${t.locale}, a maximum of ${t.pluralForms.length} plural forms are expected (${t.pluralForms.join(",")}), but the message contains ${n.length}: ${e}`);const o=t.select(i),r=t.pluralForms.indexOf(o);return n[Math.min(r,n.length-1)]}(t,i,e)}}var m=t(6654),u=t(1312),g=t(1107);const y={cardContainer:"cardContainer_S8oU",cardTitle:"cardTitle_HoSo",cardDescription:"cardDescription_c27F"};var h=t(7399),b=t(4848);const v={ui:(0,b.jsx)(h.In,{icon:"gg:ui-kit",height:"24"}),http:(0,b.jsx)(h.In,{icon:"mdi:web",height:"24"}),properties:(0,b.jsx)(h.In,{icon:"ion:options-outline",height:"24"}),server:(0,b.jsx)(h.In,{icon:"mdi:server-outline",height:"24"}),notifications:(0,b.jsx)(h.In,{icon:"carbon:notification",height:"24"}),python:(0,b.jsx)(h.In,{icon:"ion:logo-python",height:"24"}),features:(0,b.jsx)(h.In,{icon:"ri:function-add-line",height:"24"}),configuration:(0,b.jsx)(h.In,{icon:"mdi:wrench",height:"24"})};function j({href:e,children:i}){return(0,b.jsx)(a.A,{href:e,className:(0,o.A)("card padding--lg",y.cardContainer),children:i})}function N({href:e,icon:i,title:t,description:n}){return(0,b.jsxs)(j,{href:e,children:[(0,b.jsxs)(g.A,{as:"h2",className:(0,o.A)("text--truncate",y.cardTitle),title:t,children:[i," ",t]}),n&&(0,b.jsx)("p",{className:(0,o.A)("text--truncate",y.cardDescription),title:n,children:n})]})}function x({item:e}){const i=(0,r.Nr)(e),t=function(){const{selectMessage:e}=f();return i=>e(i,(0,u.T)({message:"1 item|{count} items",id:"theme.docs.DocCard.categoryDescription.plurals",description:"The default description for a category card in the generated index about how many items this category includes"},{count:i}))}();return i?(0,b.jsx)(N,{href:i,icon:"\ud83d\uddc3\ufe0f",title:e.label,description:e.description??t(e.items.length)}):null}function T({item:e}){const i=(0,r.cC)(e.docId??void 0);return(0,b.jsx)(N,{href:e.href,icon:v[e?.customProps?.icon]??((0,m.A)(e.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17"),title:e.label,description:e.description??i?.description})}function S({item:e}){switch(e.type){case"link":return(0,b.jsx)(T,{item:e});case"category":return(0,b.jsx)(x,{item:e});default:throw new Error(`unknown item type ${JSON.stringify(e)}`)}}const w={docCardListItem:"docCardListItem_W1sv"};function P({className:e}){const i=(0,r.a4)();return(0,b.jsx)(I,{items:i,className:e})}function k({item:e}){return(0,b.jsx)("article",{className:(0,o.A)(w.docCardListItem,"col col--6"),children:(0,b.jsx)(S,{item:e})})}function I(e){const{items:i,className:t}=e;if(!i)return(0,b.jsx)(P,{...e});const n=(0,r.d1)(i);return(0,b.jsx)("section",{className:(0,o.A)("row",t),children:n.map(((e,i)=>(0,b.jsx)(k,{item:e},i)))})}},617:(e,i,t)=>{t.d(i,{G:()=>l});const n=(e,i,t=!0)=>t?e.filter((e=>!o(e.name,i))):e.filter((e=>o(e.name,i)));function o(e,i){const t=e.toLowerCase();return i.some((e=>t.includes(e.toLowerCase())))}const r={propertyTable:"propertyTable_hs59",propertyCell:"propertyCell_Qyd3"};var a=t(6540);const s={copyButton:"copyButton_GOA5",icon:"icon_tewQ"};var c=t(4848);function d({text:e}){const[i,t]=(0,a.useState)(!1);return(0,c.jsx)("button",{className:s.copyButton,onClick:async()=>{try{await navigator.clipboard.writeText(e),t(!0),setTimeout((()=>t(!1)),2e3)}catch(i){console.error("Failed to copy: ",i)}},title:"Copy",children:i?(0,c.jsx)(c.Fragment,{children:(0,c.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",fill:"currentColor",viewBox:"0 0 16 16",className:s.icon,children:(0,c.jsx)("path",{d:"M13.485 1.929a.75.75 0 0 1 0 1.06L6.06 10.414a.75.75 0 0 1-1.06 0L2.515 7.94a.75.75 0 1 1 1.06-1.06L6 9.293l6.425-6.425a.75.75 0 0 1 1.06 0z"})})}):(0,c.jsx)(c.Fragment,{children:(0,c.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",fill:"currentColor",viewBox:"0 0 16 16",className:s.icon,children:[(0,c.jsx)("path",{d:"M10 1H2a1 1 0 0 0-1 1v11h2V3h7V1z"}),(0,c.jsx)("path",{d:"M13 3H5a1 1 0 0 0-1 1v11h9a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1zM5 14V4h8v10H5z"})]})})})}function l({title:e,properties:i,filter:t=[],exclusive:o=!0,additionalProperties:a=[]}){const s=[...n(i,t,o).sort(((e,i)=>e.name.length-i.name.length||e.name.localeCompare(i.name))),...a];return(0,c.jsxs)("table",{className:r.propertyTable,children:[e&&(0,c.jsx)("caption",{children:e}),(0,c.jsx)("thead",{children:(0,c.jsxs)("tr",{children:[(0,c.jsx)("th",{children:"Property"}),(0,c.jsx)("th",{children:"Description"})]})}),(0,c.jsx)("tbody",{children:s.map((e=>{return(0,c.jsx)(c.Fragment,{children:(0,c.jsxs)("tr",{children:[(0,c.jsx)("td",{className:r.propertyCell,children:(0,c.jsxs)("div",{children:[(0,c.jsx)(d,{text:e.name}),(0,c.jsx)("code",{children:e.name})]})}),(0,c.jsxs)("td",{children:[(0,c.jsx)("p",{dangerouslySetInnerHTML:{__html:e.description}}),(i=e,console.log(i.defaultValue,typeof i.defaultValue),console.log(i.type,typeof i.type),(i.defaultValue||i.type)&&(0,c.jsxs)("dl",{children:[e.type&&(0,c.jsxs)("div",{children:[(0,c.jsxs)("dt",{children:[(0,c.jsx)("span",{style:{fontStyle:"italic"},children:"Type:"}),"\xa0"]}),(0,c.jsx)("dd",{children:(0,c.jsx)("code",{children:e.type})})]}),e.defaultValue&&(0,c.jsxs)("div",{children:[(0,c.jsxs)("dt",{children:[(0,c.jsx)("span",{style:{fontStyle:"italic"},children:"Default:"}),"\xa0"]}),(0,c.jsx)("dd",{children:(0,c.jsx)("code",{children:JSON.stringify(e.defaultValue)})})]})]}))]})]},e.name)});var i}))})]})}},4533:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/notification-filter-afa48c90c2d49abec2c974d5d4387a9c.png"},9874:e=>{e.exports=JSON.parse('{"qo":[{"name":"spring.boot.admin.context-path","type":"java.lang.String","description":"The context-path prefixes the path where the Admin Servers static assets and api should be served, relative to the Dispatcher-Servlet.","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties","defaultValue":""},{"name":"spring.boot.admin.hazelcast.enabled","type":"java.lang.Boolean","description":"Enable Hazelcast support.","defaultValue":"true"},{"name":"spring.boot.admin.hazelcast.event-store","type":"java.lang.String","description":"Name of backing Hazelcast-Map for storing the instance events.","defaultValue":"spring-boot-admin-application-store"},{"name":"spring.boot.admin.hazelcast.sent-notifications","type":"java.lang.String","description":"Name of backing Hazelcast-Map for storing the sent notifications.","defaultValue":"spring-boot-admin-sent-notifications"},{"name":"spring.boot.admin.instance-auth.default-password","type":"java.lang.String","description":"Default userpassword used for authentication to each instance. Individual values for specific instances can be overriden using `spring.boot.admin.instance-auth.service-map.*.user-password`. <br/> Default: null","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$InstanceAuthProperties"},{"name":"spring.boot.admin.instance-auth.default-user-name","type":"java.lang.String","description":"Default username used for authentication to each instance. Individual values for specific instances can be overriden using `spring.boot.admin.instance-auth.service-map.*.user-name`. <br/> Default: null","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$InstanceAuthProperties"},{"name":"spring.boot.admin.instance-auth.enabled","type":"java.lang.Boolean","description":"Whether or not to use configuration properties as a source for instance credentials <br/> Default: true","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$InstanceAuthProperties","defaultValue":true},{"name":"spring.boot.admin.instance-auth.service-map","type":"java.util.Map<java.lang.String,de.codecentric.boot.admin.server.web.client.BasicAuthHttpHeaderProvider$InstanceCredentials>","description":"Map of instance credentials per registered service name","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$InstanceAuthProperties"},{"name":"spring.boot.admin.instance-proxy.ignored-headers","type":"java.util.Set<java.lang.String>","description":"Headers not to be forwarded when making requests to clients.","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$InstanceProxyProperties"},{"name":"spring.boot.admin.metadata-keys-to-sanitize","type":"java.lang.String[]","description":"The metadata keys which should be sanitized when serializing to json","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties","defaultValue":[".*password$",".*secret$",".*key$",".*token$",".*credentials.*",".*vcap_services$"]},{"name":"spring.boot.admin.monitor.default-retries","type":"java.lang.Integer","description":"Default number of retries for failed requests. Individual values for specific endpoints can be overriden using `spring.boot.admin.monitor.retries.*`.","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$MonitorProperties","defaultValue":0},{"name":"spring.boot.admin.monitor.default-timeout","type":"java.time.Duration","description":"Default timeout when making requests. Individual values for specific endpoints can be overriden using `spring.boot.admin.monitor.timeout.*`.","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$MonitorProperties","defaultValue":"10000ms"},{"name":"spring.boot.admin.monitor.info-interval","type":"java.time.Duration","description":"Time interval to check the info of instances,","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$MonitorProperties","defaultValue":"1m"},{"name":"spring.boot.admin.monitor.info-lifetime","type":"java.time.Duration","description":"Lifetime of info. The info won\'t be updated as long the last info isn\'t expired.","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$MonitorProperties","defaultValue":"1m"},{"name":"spring.boot.admin.monitor.info-max-backoff","type":"java.time.Duration","description":"The maximal backoff for info check retries (retry after error has exponential backoff, minimum backoff is 1 second).","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$MonitorProperties","defaultValue":"10m"},{"name":"spring.boot.admin.monitor.retries","type":"java.util.Map<java.lang.String,java.lang.Integer>","description":"Number of retries per endpointId. Defaults to default-retry.","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$MonitorProperties"},{"name":"spring.boot.admin.monitor.status-interval","type":"java.time.Duration","description":"Time interval to check the status of instances, must be greater than 1 second.","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$MonitorProperties","defaultValue":"10000ms"},{"name":"spring.boot.admin.monitor.status-lifetime","type":"java.time.Duration","description":"Lifetime of status. The status won\'t be updated as long the last status isn\'t expired.","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$MonitorProperties","defaultValue":"10000ms"},{"name":"spring.boot.admin.monitor.status-max-backoff","type":"java.time.Duration","description":"The maximal backoff for status check retries (retry after error has exponential backoff, minimum backoff is 1 second).","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$MonitorProperties","defaultValue":"60000ms"},{"name":"spring.boot.admin.monitor.timeout","type":"java.util.Map<java.lang.String,java.time.Duration>","description":"timeout per endpointId. Defaults to default-timeout.","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$MonitorProperties"},{"name":"spring.boot.admin.notify.dingtalk.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.DingTalkNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.dingtalk.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.DingTalkNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.dingtalk.message","type":"java.lang.String","sourceType":"de.codecentric.boot.admin.server.notify.DingTalkNotifier"},{"name":"spring.boot.admin.notify.dingtalk.secret","type":"java.lang.String","description":"Secret for DingTalk.","sourceType":"de.codecentric.boot.admin.server.notify.DingTalkNotifier"},{"name":"spring.boot.admin.notify.dingtalk.webhook-url","type":"java.lang.String","description":"Webhook URI for the DingTalk API.","sourceType":"de.codecentric.boot.admin.server.notify.DingTalkNotifier"},{"name":"spring.boot.admin.notify.discord.avatar-url","type":"java.lang.String","description":"Optional URL to avatar.","sourceType":"de.codecentric.boot.admin.server.notify.DiscordNotifier"},{"name":"spring.boot.admin.notify.discord.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.DiscordNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.discord.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.DiscordNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.discord.message","type":"java.lang.String","sourceType":"de.codecentric.boot.admin.server.notify.DiscordNotifier"},{"name":"spring.boot.admin.notify.discord.tts","type":"java.lang.Boolean","description":"If the message is a text to speech message. False by default.","sourceType":"de.codecentric.boot.admin.server.notify.DiscordNotifier","defaultValue":false},{"name":"spring.boot.admin.notify.discord.username","type":"java.lang.String","description":"Optional username. Default is set in Discord.","sourceType":"de.codecentric.boot.admin.server.notify.DiscordNotifier"},{"name":"spring.boot.admin.notify.discord.webhook-url","type":"java.net.URI","description":"Webhook URI for the Discord API (i.e. https://discordapp.com/api/webhooks/{webhook.id}/{webhook.token})","sourceType":"de.codecentric.boot.admin.server.notify.DiscordNotifier"},{"name":"spring.boot.admin.notify.feishu.at-all","type":"java.lang.Boolean","description":"@ all.","sourceType":"de.codecentric.boot.admin.server.notify.FeiShuNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.feishu.card.theme-color","type":"java.lang.String","sourceType":"de.codecentric.boot.admin.server.notify.FeiShuNotifier$Card","defaultValue":"red"},{"name":"spring.boot.admin.notify.feishu.card.title","type":"java.lang.String","description":"This is header title.","sourceType":"de.codecentric.boot.admin.server.notify.FeiShuNotifier$Card","defaultValue":"Codecentric\'s Spring Boot Admin notice"},{"name":"spring.boot.admin.notify.feishu.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.FeiShuNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.feishu.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.FeiShuNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.feishu.message","type":"java.lang.String","sourceType":"de.codecentric.boot.admin.server.notify.FeiShuNotifier"},{"name":"spring.boot.admin.notify.feishu.message-type","type":"de.codecentric.boot.admin.server.notify.FeiShuNotifier$MessageType","description":"FeiShu message type: text(\u6587\u672c) interactive(\u6d88\u606f\u5361\u7247)","sourceType":"de.codecentric.boot.admin.server.notify.FeiShuNotifier","defaultValue":"interactive"},{"name":"spring.boot.admin.notify.feishu.secret","type":"java.lang.String","description":"The secret of the chat group robot from the FeiShu setup.","sourceType":"de.codecentric.boot.admin.server.notify.FeiShuNotifier"},{"name":"spring.boot.admin.notify.feishu.webhook-url","type":"java.net.URI","description":"Webhook URL for the FeiShu(\u98de\u4e66) chat group API (i.e. https://open.feishu.cn/open-apis/bot/v2/hook/xxx).","sourceType":"de.codecentric.boot.admin.server.notify.FeiShuNotifier"},{"name":"spring.boot.admin.notify.hipchat.auth-token","type":"java.lang.String","description":"API token that has access to notify in the room","sourceType":"de.codecentric.boot.admin.server.notify.HipchatNotifier"},{"name":"spring.boot.admin.notify.hipchat.description","type":"java.lang.String","description":"Trigger description. SpEL template using event as root;","sourceType":"de.codecentric.boot.admin.server.notify.HipchatNotifier"},{"name":"spring.boot.admin.notify.hipchat.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.HipchatNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.hipchat.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.HipchatNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.hipchat.notify","type":"java.lang.Boolean","description":"TRUE will cause OS notification, FALSE will only notify to room","sourceType":"de.codecentric.boot.admin.server.notify.HipchatNotifier","defaultValue":false},{"name":"spring.boot.admin.notify.hipchat.room-id","type":"java.lang.String","description":"Id of the room to notify","sourceType":"de.codecentric.boot.admin.server.notify.HipchatNotifier"},{"name":"spring.boot.admin.notify.hipchat.url","type":"java.net.URI","description":"Base URL for HipChat API (i.e. https://ACCOUNT_NAME.hipchat.com/v2","sourceType":"de.codecentric.boot.admin.server.notify.HipchatNotifier"},{"name":"spring.boot.admin.notify.letschat.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.LetsChatNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.letschat.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.LetsChatNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.letschat.message","type":"java.lang.String","description":"Message template. SpEL template using event as root","sourceType":"de.codecentric.boot.admin.server.notify.LetsChatNotifier"},{"name":"spring.boot.admin.notify.letschat.room","type":"java.lang.String","description":"Name of the room","sourceType":"de.codecentric.boot.admin.server.notify.LetsChatNotifier"},{"name":"spring.boot.admin.notify.letschat.token","type":"java.lang.String","description":"Token for the Let\xb4s chat API","sourceType":"de.codecentric.boot.admin.server.notify.LetsChatNotifier"},{"name":"spring.boot.admin.notify.letschat.url","type":"java.net.URI","description":"Host URL for Let\xb4s Chat","sourceType":"de.codecentric.boot.admin.server.notify.LetsChatNotifier"},{"name":"spring.boot.admin.notify.letschat.username","type":"java.lang.String","description":"username which sends notification","sourceType":"de.codecentric.boot.admin.server.notify.LetsChatNotifier","defaultValue":"Spring Boot Admin"},{"name":"spring.boot.admin.notify.mail.additional-properties","type":"java.util.Map<java.lang.String,java.lang.Object>","description":"Additional properties to be set for the template","sourceType":"de.codecentric.boot.admin.server.notify.MailNotifier"},{"name":"spring.boot.admin.notify.mail.base-url","type":"java.lang.String","description":"Base-URL used for hyperlinks in mail","sourceType":"de.codecentric.boot.admin.server.notify.MailNotifier"},{"name":"spring.boot.admin.notify.mail.cc","type":"java.lang.String[]","description":"cc-recipients of the mail","sourceType":"de.codecentric.boot.admin.server.notify.MailNotifier","defaultValue":[]},{"name":"spring.boot.admin.notify.mail.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.MailNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.mail.from","type":"java.lang.String","description":"sender of the change","sourceType":"de.codecentric.boot.admin.server.notify.MailNotifier","defaultValue":"Spring Boot Admin <noreply@localhost>"},{"name":"spring.boot.admin.notify.mail.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.MailNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.mail.template","type":"java.lang.String","description":"Thymeleaf template for mail","sourceType":"de.codecentric.boot.admin.server.notify.MailNotifier","defaultValue":"META-INF/spring-boot-admin-server/mail/status-changed.html"},{"name":"spring.boot.admin.notify.mail.to","type":"java.lang.String[]","description":"recipients of the mail","sourceType":"de.codecentric.boot.admin.server.notify.MailNotifier","defaultValue":["root@localhost"]},{"name":"spring.boot.admin.notify.ms-teams.de-registered-title","type":"java.lang.String","description":"Title of the Teams message when an app de-registers","sourceType":"de.codecentric.boot.admin.server.notify.MicrosoftTeamsNotifier","defaultValue":"De-Registered"},{"name":"spring.boot.admin.notify.ms-teams.deregister-activity-subtitle","type":"java.lang.String","description":"Message will be used as title of the Activity section of the Teams message when an app de-registers.","sourceType":"de.codecentric.boot.admin.server.notify.MicrosoftTeamsNotifier"},{"name":"spring.boot.admin.notify.ms-teams.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.MicrosoftTeamsNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.ms-teams.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.MicrosoftTeamsNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.ms-teams.message-summary","type":"java.lang.String","description":"Summary section of every Teams message originating from Spring Boot Admin","sourceType":"de.codecentric.boot.admin.server.notify.MicrosoftTeamsNotifier","defaultValue":"Spring Boot Admin Notification"},{"name":"spring.boot.admin.notify.ms-teams.register-activity-subtitle","type":"java.lang.String","description":"Message will be used as title of the Activity section of the Teams message when an app registers","sourceType":"de.codecentric.boot.admin.server.notify.MicrosoftTeamsNotifier"},{"name":"spring.boot.admin.notify.ms-teams.registered-title","type":"java.lang.String","description":"Title of the Teams message when an app registers","sourceType":"de.codecentric.boot.admin.server.notify.MicrosoftTeamsNotifier","defaultValue":"Registered"},{"name":"spring.boot.admin.notify.ms-teams.status-activity-subtitle","type":"java.lang.String","description":"Message will be used as title of the Activity section of the Teams message when an app changes status","sourceType":"de.codecentric.boot.admin.server.notify.MicrosoftTeamsNotifier"},{"name":"spring.boot.admin.notify.ms-teams.status-changed-title","type":"java.lang.String","description":"Title of the Teams message when an app changes status","sourceType":"de.codecentric.boot.admin.server.notify.MicrosoftTeamsNotifier","defaultValue":"Status Changed"},{"name":"spring.boot.admin.notify.ms-teams.theme-color","type":"java.lang.String","description":"Theme Color is the color of the accent on the message that appears in Microsoft Teams. Default is Spring Green","sourceType":"de.codecentric.boot.admin.server.notify.MicrosoftTeamsNotifier"},{"name":"spring.boot.admin.notify.ms-teams.webhook-url","type":"java.net.URI","description":"Webhook url for Microsoft Teams Channel Webhook connector (i.e. <a href=\\"https://outlook.office.com/webhook/\\">...</a>{webhook-id})","sourceType":"de.codecentric.boot.admin.server.notify.MicrosoftTeamsNotifier"},{"name":"spring.boot.admin.notify.opsgenie.actions","type":"java.lang.String","description":"Comma separated list of actions that can be executed.","sourceType":"de.codecentric.boot.admin.server.notify.OpsGenieNotifier"},{"name":"spring.boot.admin.notify.opsgenie.api-key","type":"java.lang.String","description":"Integration ApiKey","sourceType":"de.codecentric.boot.admin.server.notify.OpsGenieNotifier"},{"name":"spring.boot.admin.notify.opsgenie.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.OpsGenieNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.opsgenie.entity","type":"java.lang.String","description":"The entity the alert is related to.","sourceType":"de.codecentric.boot.admin.server.notify.OpsGenieNotifier"},{"name":"spring.boot.admin.notify.opsgenie.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.OpsGenieNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.opsgenie.source","type":"java.lang.String","description":"Field to specify source of alert. By default, it will be assigned to IP address of incoming request","sourceType":"de.codecentric.boot.admin.server.notify.OpsGenieNotifier"},{"name":"spring.boot.admin.notify.opsgenie.tags","type":"java.lang.String","description":"Comma separated list of labels attached to the alert","sourceType":"de.codecentric.boot.admin.server.notify.OpsGenieNotifier"},{"name":"spring.boot.admin.notify.opsgenie.url","type":"java.net.URI","description":"BASE URL for OpsGenie API","sourceType":"de.codecentric.boot.admin.server.notify.OpsGenieNotifier","defaultValue":"https://api.opsgenie.com/v2/alerts"},{"name":"spring.boot.admin.notify.opsgenie.user","type":"java.lang.String","description":"Default owner of the execution. If user is not specified, the system becomes owner of the execution.","sourceType":"de.codecentric.boot.admin.server.notify.OpsGenieNotifier"},{"name":"spring.boot.admin.notify.pagerduty.client","type":"java.lang.String","description":"Client for pagerduty-REST-API","sourceType":"de.codecentric.boot.admin.server.notify.PagerdutyNotifier"},{"name":"spring.boot.admin.notify.pagerduty.client-url","type":"java.net.URI","description":"Client-url for pagerduty-REST-API","sourceType":"de.codecentric.boot.admin.server.notify.PagerdutyNotifier"},{"name":"spring.boot.admin.notify.pagerduty.description","type":"java.lang.String","description":"Trigger description. SpEL template using event as root;","sourceType":"de.codecentric.boot.admin.server.notify.PagerdutyNotifier"},{"name":"spring.boot.admin.notify.pagerduty.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.PagerdutyNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.pagerduty.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.PagerdutyNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.pagerduty.service-key","type":"java.lang.String","description":"Service-Key for pagerduty-REST-API","sourceType":"de.codecentric.boot.admin.server.notify.PagerdutyNotifier"},{"name":"spring.boot.admin.notify.pagerduty.url","type":"java.net.URI","description":"URI for pagerduty-REST-API","sourceType":"de.codecentric.boot.admin.server.notify.PagerdutyNotifier","defaultValue":"https://events.pagerduty.com/generic/2010-04-15/create_event.json"},{"name":"spring.boot.admin.notify.proxy.host","type":"java.lang.String","description":"Proxy-Host for sending notifications","sourceType":"de.codecentric.boot.admin.server.notify.NotifierProxyProperties"},{"name":"spring.boot.admin.notify.proxy.password","type":"java.lang.String","description":"Proxy-Password for sending notifications (if proxy requires authentication).","sourceType":"de.codecentric.boot.admin.server.notify.NotifierProxyProperties"},{"name":"spring.boot.admin.notify.proxy.port","type":"java.lang.Integer","description":"Proxy-Port for sending notifications","sourceType":"de.codecentric.boot.admin.server.notify.NotifierProxyProperties","defaultValue":0},{"name":"spring.boot.admin.notify.proxy.username","type":"java.lang.String","description":"Proxy-User for sending notifications (if proxy requires authentication).","sourceType":"de.codecentric.boot.admin.server.notify.NotifierProxyProperties"},{"name":"spring.boot.admin.notify.rocketchat.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.RocketChatNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.rocketchat.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.RocketChatNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.rocketchat.room-id","type":"java.lang.String","description":"Room Id to send message","sourceType":"de.codecentric.boot.admin.server.notify.RocketChatNotifier"},{"name":"spring.boot.admin.notify.rocketchat.token","type":"java.lang.String","description":"Token for RocketChat API","sourceType":"de.codecentric.boot.admin.server.notify.RocketChatNotifier"},{"name":"spring.boot.admin.notify.rocketchat.url","type":"java.lang.String","description":"Host URL for RocketChat server","sourceType":"de.codecentric.boot.admin.server.notify.RocketChatNotifier"},{"name":"spring.boot.admin.notify.rocketchat.user-id","type":"java.lang.String","description":"User Id for RocketChat API","sourceType":"de.codecentric.boot.admin.server.notify.RocketChatNotifier"},{"name":"spring.boot.admin.notify.slack.channel","type":"java.lang.String","description":"Optional channel name without # sign (i.e. somechannel)","sourceType":"de.codecentric.boot.admin.server.notify.SlackNotifier"},{"name":"spring.boot.admin.notify.slack.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.SlackNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.slack.icon","type":"java.lang.String","description":"Optional emoji icon without colons (i.e. my-emoji)","sourceType":"de.codecentric.boot.admin.server.notify.SlackNotifier"},{"name":"spring.boot.admin.notify.slack.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.SlackNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.slack.message","type":"java.lang.String","description":"Message formatted using Slack markups. SpEL template using event as root","sourceType":"de.codecentric.boot.admin.server.notify.SlackNotifier"},{"name":"spring.boot.admin.notify.slack.username","type":"java.lang.String","description":"Optional username which sends notification","sourceType":"de.codecentric.boot.admin.server.notify.SlackNotifier","defaultValue":"Spring Boot Admin"},{"name":"spring.boot.admin.notify.slack.webhook-url","type":"java.net.URI","description":"Webhook url for Slack API (i.e. https://hooks.slack.com/services/xxx)","sourceType":"de.codecentric.boot.admin.server.notify.SlackNotifier"},{"name":"spring.boot.admin.notify.telegram.api-url","type":"java.lang.String","description":"base url for telegram (i.e. https://api.telegram.org)","sourceType":"de.codecentric.boot.admin.server.notify.TelegramNotifier","defaultValue":"https://api.telegram.org"},{"name":"spring.boot.admin.notify.telegram.auth-token","type":"java.lang.String","description":"The token identifying und authorizing your Telegram bot (e.g. `123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11`)","sourceType":"de.codecentric.boot.admin.server.notify.TelegramNotifier"},{"name":"spring.boot.admin.notify.telegram.chat-id","type":"java.lang.String","description":"Unique identifier for the target chat or username of the target channel","sourceType":"de.codecentric.boot.admin.server.notify.TelegramNotifier"},{"name":"spring.boot.admin.notify.telegram.disable-notify","type":"java.lang.Boolean","description":"If true users will receive a notification with no sound.","sourceType":"de.codecentric.boot.admin.server.notify.TelegramNotifier","defaultValue":false},{"name":"spring.boot.admin.notify.telegram.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.TelegramNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.telegram.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.TelegramNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.telegram.parse-mode","type":"java.lang.String","description":"Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in your bot\'s message.","sourceType":"de.codecentric.boot.admin.server.notify.TelegramNotifier","defaultValue":"HTML"},{"name":"spring.boot.admin.notify.webex.auth-token","type":"java.lang.String","description":"Bearer authentication token for Webex API","sourceType":"de.codecentric.boot.admin.server.notify.WebexNotifier"},{"name":"spring.boot.admin.notify.webex.enabled","type":"java.lang.Boolean","description":"Enables the notification.","sourceType":"de.codecentric.boot.admin.server.notify.WebexNotifier","defaultValue":true},{"name":"spring.boot.admin.notify.webex.ignore-changes","type":"java.lang.String[]","description":"List of changes to ignore. Must be in Format OLD:NEW, for any status use * as wildcard, e.g. *:UP or OFFLINE:*","sourceType":"de.codecentric.boot.admin.server.notify.WebexNotifier","defaultValue":["UNKNOWN:UP"]},{"name":"spring.boot.admin.notify.webex.room-id","type":"java.lang.String","description":"Room identifier in Webex where the message will be sent","sourceType":"de.codecentric.boot.admin.server.notify.WebexNotifier"},{"name":"spring.boot.admin.notify.webex.url","type":"java.net.URI","description":"base url for Webex API (i.e. https://webexapis.com/v1/messages)","sourceType":"de.codecentric.boot.admin.server.notify.WebexNotifier","defaultValue":"https://webexapis.com/v1/messages"},{"name":"spring.boot.admin.probed-endpoints","type":"java.lang.String[]","description":"For Spring Boot 2.x applications the endpoints should be discovered automatically using the actuator links. For Spring Boot 1.x applications SBA probes for the specified endpoints using an OPTIONS request. If the path differs from the id you can specify this as id:path (e.g. health:ping).","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties","defaultValue":["health","env","metrics","httptrace:trace","httptrace","threaddump:dump","threaddump","jolokia","info","logfile","refresh","flyway","liquibase","heapdump","loggers","auditevents","mappings","scheduledtasks","configprops","caches","beans"]},{"name":"spring.boot.admin.server.enabled","type":"java.lang.Boolean","description":"Enable Spring Boot Admin Server Default: true","sourceType":"de.codecentric.boot.admin.server.config.AdminServerProperties$ServerProperties","defaultValue":true},{"name":"spring.boot.admin.monitor.connect-timeout","type":"java.lang.Long","deprecated":true,"deprecation":{"level":"error","replacement":"spring.boot.admin.monitor.default-timeout"}},{"name":"spring.boot.admin.monitor.period","type":"java.lang.Long","deprecated":true,"deprecation":{"level":"warning","replacement":"spring.boot.admin.monitor.status-interval"}},{"name":"spring.boot.admin.monitor.read-timeout","type":"java.lang.Long","deprecated":true,"deprecation":{"level":"error","replacement":"spring.boot.admin.monitor.default-timeout"}}]}')}}]);